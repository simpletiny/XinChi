package seentao.xhsn.person.certificate.service.impl;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Timestamp;

import net.sf.json.JSONObject;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.apache.struts2.ServletActionContext;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import seentao.xhsn.bean.HsCertificateBO;
import seentao.xhsn.bean.HsFileDataBO;
import seentao.xhsn.bean.HsFilesBO;
import seentao.xhsn.common.ResourcesConstants;
import seentao.xhsn.common.SeentaoApplicationContext;
import seentao.xhsn.common.UserSessionBean;
import seentao.xhsn.exception.BusinessException;
import seentao.xhsn.person.certificate.bean.HsCertificateExtendBO;
import seentao.xhsn.person.certificate.service.ICertificateUploadService;
import seentao.xhsn.sys.filedata.dao.IFileDataDAO;
import seentao.xhsn.sys.files.dao.IFilesDAO;
import seentao.xhsn.sys.learnpathupload.action.LearnPathUploadAction;
import seentao.xhsn.tools.PropertiesUtil;

@Service
public class CertificateUploadServiceImpl implements ICertificateUploadService {
	private Logger logger = Logger.getLogger(LearnPathUploadAction.class);
	@Autowired
	private IFilesDAO filesDao;
	@Autowired
	private IFileDataDAO fileDataDao;

	@Override
	@Transactional
	public String saveAndUpload(File file, HsCertificateExtendBO bo, String fileName, String ip) {
		// 上传文件
		HsFileDataBO dataBO = this.uploadFile(file, fileName);
		// 保存附件信息
		String	filesID = "";
		if(StringUtils.isEmpty(bo.getId())){
			filesID = this.saveFiles();
		}else{
			filesID=bo.getCerti_file_id();
		}
		// 保存附件详细
		dataBO.setFile_id(filesID);
		dataBO.setFile_name_old(fileName);
		String fileDataId = this.saveFileData(dataBO, ip);
		// 返回路径和主键
		JSONObject obj = new JSONObject();
		obj.put("certi_file_id", filesID);
		obj.put("path", dataBO.getFile_path() + dataBO.getFile_name_now());
		obj.put("fileDataID", fileDataId);
		String json = obj.toString();
		return json;
	}

	private String saveFileData(HsFileDataBO dataBO, String ip) {
		dataBO.setUpload_ip(ip);
		fileDataDao.insert(dataBO);
		return dataBO.getId();
	}

	private String saveFiles() {
		HsFilesBO bo = new HsFilesBO();
		bo.setTab_name(new HsCertificateBO().getTable_name());
		bo.setClm_name("certi_file_id");
		filesDao.insert(bo);
		return bo.getId();
	}

	// 执行上传功能
	private HsFileDataBO uploadFile(File file, String fileName) {
		HsFileDataBO bo = new HsFileDataBO();
		UserSessionBean bean = (UserSessionBean) SeentaoApplicationContext
				.getSession(ResourcesConstants.LOGIN_SESSION_KEY);
		String savePath = PropertiesUtil.getProperty(ResourcesConstants.UPLOAD_PATH);
		FileOutputStream fos = null;
		FileInputStream fis = null;
		String uploadPath = savePath + "/" + "certificate" + "/" + bean.getUser_id() + "/";
		String type = fileName.substring(fileName.lastIndexOf("."), fileName.length());
		String newFileName = System.currentTimeMillis() + type;
		bo.setFile_name_now(newFileName);
		bo.setFile_path(uploadPath);
		bo.setFile_type(type);
		bo.setFile_size(file.length() + "");
		bo.setUpload_time(new Timestamp(System.currentTimeMillis()));
		try {
			String dir = ServletActionContext.getServletContext().getRealPath("/");
			if (!new File(dir + uploadPath).exists())
				new File(dir + uploadPath).mkdirs();
			fos = new FileOutputStream(dir + uploadPath + newFileName);
			fis = new FileInputStream(file);
			byte[] buffer = new byte[1024];
			int len = 0;
			while ((len = fis.read(buffer)) > 0) {
				fos.write(buffer, 0, len);
			}
		} catch (Exception e) {
			logger.error("上传失败!", e);
			throw new BusinessException(e, "上传失败!");
		} finally {
			try {
				if (fos != null) {
					fos.flush();
					fos.close();
				}
				if (fis != null)
					fis.close();
			} catch (IOException e) {
				logger.error("上传失败!", e);
				throw new BusinessException(e, "上传失败!");
			}

		}
		return bo;
	}

	@Override
	@Transactional
	public void delCertificateFile(String fileDataID) {
		// 删除文件
		HsFileDataBO bo = fileDataDao.selectByPrimaryKey(fileDataID);
		String dir = ServletActionContext.getServletContext().getRealPath("/");
		File file = new File(dir + bo.getFile_path() + bo.getFile_name_now());
		file.deleteOnExit();
		// 删除附件表数据
		fileDataDao.delete(fileDataID);
	}

}
