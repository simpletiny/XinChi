package seentao.xhsn.regist.service.impl;

import java.sql.Timestamp;
import java.util.List;

import org.apache.commons.codec.binary.Base64;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import seentao.xhsn.bean.HsEnterpriseBO;
import seentao.xhsn.bean.HsResumeBO;
import seentao.xhsn.bean.HsUserBO;
import seentao.xhsn.common.DictionaryEnum;
import seentao.xhsn.enterprise.info.dao.IInfoDAO;
import seentao.xhsn.login.dao.ILoginDAO;
import seentao.xhsn.person.resume.dao.IResumeDAO;
import seentao.xhsn.regist.dao.IRegistDao;
import seentao.xhsn.regist.service.IRegistService;
import seentao.xhsn.tools.MD5Util;
import seentao.xhsn.tools.PropertiesUtil;
import seentao.xhsn.tools.mail.MailSender;
import seentao.xhsn.tools.mail.MailSenderInfo;

@Service
@Transactional
public class RegistServiceImpl implements IRegistService {

	@Autowired
	private IRegistDao registDao;
	@Autowired
	private ILoginDAO loginDao;
	@Autowired
	private IResumeDAO resumeDao;

	@Autowired
	private IInfoDAO infoDao;

	@Override
	@Transactional(rollbackFor = { RuntimeException.class, Exception.class })
	public String insertAndSendEmail(HsUserBO bo, String basePath) {
		String id = this.insert(bo);
		// 如果用户类型为个人的话，就生成简历信息
		if (DictionaryEnum.PERSON_TYPE.getStringValue().equals(
				bo.getUser_type())) {
			this.insertResume(bo);
		}
		this.sendEmail(bo, basePath);
		return id;
	}

	/**
	 * 注册时新建一份简历
	 * 
	 * @param bo
	 */
	public void insertResume(HsUserBO bo) {
		HsResumeBO resumeBO = new HsResumeBO();
		resumeBO.setUser_id(bo.getId());
		resumeDao.insert(resumeBO);
	}

	public String insert(HsUserBO bo) {
		return this.registDao.insert(bo);
	}

	public void sendEmail(HsUserBO bo, String basePath) {
		// 1: 根据信息发送验证邮件
		String code = this.sendHtmlMail(bo, basePath);
		// 2: 修改个人的基本信息，标识，该用户已经发送
		bo.setSend_code(code);
		this.updateUserInfo(bo);
	}

	private void updateUserInfo(HsUserBO bo) {
		HsUserBO hsUserBO = new HsUserBO();
		hsUserBO.setUser_isopen(DictionaryEnum.MAIL_CLOSED.getIntValue());
		hsUserBO.setSend_code(bo.getSend_code());
		hsUserBO.setId(bo.getId());
		loginDao.updateLoginInfo(hsUserBO);
	}

	private String sendHtmlMail(HsUserBO bo, String basePath) {
		MailSenderInfo mailInfo = new MailSenderInfo();
		mailInfo.setMailServerHost(PropertiesUtil.getProperty("mailServerHost"));
		mailInfo.setMailServerPort(PropertiesUtil.getProperty("mailServerPort"));
		mailInfo.setValidate(true);
		mailInfo.setUserName(PropertiesUtil.getProperty("mailSendUser"));
		String pwd = new String(Base64.decodeBase64(PropertiesUtil
				.getProperty("mailSendPwd")));
		mailInfo.setPassword(pwd);
		mailInfo.setFromAddress(PropertiesUtil.getProperty("mailSendUser"));
		mailInfo.setToAddress(bo.getUser_email());
		String subject = PropertiesUtil.getProperty("mailSubject");
		mailInfo.setSubject(subject);
		String codeStr = bo.getId() + "&" + MD5Util.getMD5Str(bo.getId()) + "&"
				+ System.currentTimeMillis();
		String code = Base64.encodeBase64String(codeStr.getBytes());
		String html = "<div id=\"mailContentContainer\" > "
				+ " <p>亲爱的"
				+ bo.getUser_email()
				+ "您好:<br><br>恭喜您在新道人才注册成功.<br><br>"
				+ "请您点击下面的邮件认证链接.<br><br>您邮件认证的链接是:"
				+ "<a href=\""
				+ basePath
				+ "user/confirm?p="
				+ code
				+ "\" target=\"_blank\">"
				+ basePath
				+ "user/confirm?p="
				+ code
				+ "</a><br><br>请<a href=\""
				+ basePath
				+ "user/confirm?p="
				+ code
				+ "\" "
				+ "target=\"_blank\">点击此链接</a>或在浏览器中输入此链接.<br><br>新道人才中心.</p> </div>";
		mailInfo.setContent(html);
		// 这个类主要来发送邮件
		MailSender sms = new MailSender();
		sms.sendHtmlMail(mailInfo);
		return code;
	}

	@Override
	public List<HsUserBO> findUserByTypeAndEmail(int user_type, String email) {
		HsUserBO bo = new HsUserBO();
		bo.setUser_type(user_type);
		bo.setUser_email(email);
		return this.registDao.findUserByParam(bo);
	}


	@Override
	@Transactional(rollbackFor = { RuntimeException.class, Exception.class })
	public void insertENTAndSendEmail(HsUserBO bo, HsEnterpriseBO entBO,
			String basePath) {
		// 设置默认字段
		bo.setUser_registtime(new Timestamp(System.currentTimeMillis()));
		bo.setUser_state(DictionaryEnum.STATE_NORMAL.getStringValue());
		// 存储用户信息, 给邮箱发送验证信息
		String sys_user_id = this.insert(bo);
		this.sendEmail(bo, basePath);
		// 保存企业基本信息
		entBO.setSys_user_id(sys_user_id);
		infoDao.insert(entBO);
	}

}
