package seentao.xhsn.person.put.service.impl;

import java.io.IOException;
import java.io.StringWriter;
import java.sql.Timestamp;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.apache.commons.codec.binary.Base64;
import org.apache.log4j.Logger;
import org.apache.struts2.ServletActionContext;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import seentao.xhsn.bean.HsEtpReleasejobBO;
import seentao.xhsn.bean.HsLearnpathBO;
import seentao.xhsn.bean.HsPutresumeBO;
import seentao.xhsn.bean.HsResumeBO;
import seentao.xhsn.common.ReadTextUtil;
import seentao.xhsn.common.ResourcesConstants;
import seentao.xhsn.common.SeentaoApplicationContext;
import seentao.xhsn.common.SupperBO;
import seentao.xhsn.common.UserSessionBean;
import seentao.xhsn.enterprise.releasejob.dao.IReleasejobDAO;
import seentao.xhsn.exception.BusinessException;
import seentao.xhsn.person.learnpath.dao.ILearnPathDAO;
import seentao.xhsn.person.put.dao.IPutResumeDAO;
import seentao.xhsn.person.put.service.IPutResumeService;
import seentao.xhsn.person.resume.dao.IResumeDAO;
import seentao.xhsn.person.resume.service.IResumeService;
import seentao.xhsn.tools.PropertiesUtil;
import seentao.xhsn.tools.mail.MailSender;
import seentao.xhsn.tools.mail.MailSenderInfo;
import freemarker.template.Configuration;
import freemarker.template.DefaultObjectWrapper;
import freemarker.template.Template;
import freemarker.template.TemplateException;
import freemarker.template.TemplateExceptionHandler;

/**
 * @author wjx
 * @date 2014年12月4日 下午3:26:32
 * @note 投放简历Service的实现类
 */
@Service
public class PutResumeServiceImpl implements IPutResumeService {

	private static Logger logger=Logger.getLogger(PutResumeServiceImpl.class);
	
	@Autowired
	private IPutResumeDAO putResumeDAO;

	@Autowired
	private IReleasejobDAO releaseJobDAO;

	@Autowired
	private IResumeDAO resumeDAO;
	
	@Autowired
	private IResumeService resumeService;

	@Autowired
	private ILearnPathDAO pathDao;
	
	@Override
	@Transactional
	public int putResumeByParam(String res_id, String releaseJob_id) {
		int count = 0;
		// 1:获取相关信息,并生成建立信息
		HsResumeBO resumeBO = resumeDAO.selectByPrimaryKey(res_id);
//		ServletContext context = ServletActionContext.getServletContext();
//		resumeBO.setStatic_path(resumeService.generateResumeHTML(resumeBO, context));
//		resumeDAO.update(resumeBO);
		HsEtpReleasejobBO releaseJobBO = releaseJobDAO.selectByPrimaryKey(releaseJob_id);
		// 2:插入信息
		HsPutresumeBO bo = new HsPutresumeBO();
		bo.setEtp_id(releaseJobBO.getCom_id());
		bo.setUser_id(resumeBO.getUser_id());
		bo.setRes_id(resumeBO.getId());
		bo.setJob_id(releaseJobBO.getId());
		bo.setPutdatetime(new Timestamp(System.currentTimeMillis()));
		String pk = putResumeDAO.insert(bo);
		if (pk != null && pk.trim().length() > 0) {
			// 3:发送邮件
			sendMailForResume(releaseJobBO.getLinkman_email(), resumeBO);
		}
		//计算当天已投递的数量
		count = putResumeDAO.getCountByPutData(new Timestamp(System.currentTimeMillis()), res_id);
		return count;
	}

	@Override
	@Transactional
	public int putResumeByParam(String res_id, String[] releaseJob_ids) {
		int count = 0;
		// 1:获取相关信息,并生成简历信息
		HsResumeBO resumeBO = resumeDAO.selectByPrimaryKey(res_id);
//		ServletContext context = ServletActionContext.getServletContext();
//		resumeBO.setStatic_path(resumeService.generateResumeHTML(resumeBO, context));
//		resumeDAO.update(resumeBO);
		for (int i = 0; i < releaseJob_ids.length; i++) {
			String releaseJob_id = releaseJob_ids[i];
			HsEtpReleasejobBO releaseJobBO = releaseJobDAO.selectByPrimaryKey(releaseJob_id);
			// 2:插入信息
			HsPutresumeBO bo = new HsPutresumeBO();
			bo.setEtp_id(releaseJobBO.getCom_id());
			bo.setUser_id(resumeBO.getUser_id());
			bo.setRes_id(resumeBO.getId());
			bo.setJob_id(releaseJobBO.getId());
			bo.setPutdatetime(new Timestamp(System.currentTimeMillis()));
			String pk = putResumeDAO.insert(bo);

			if (pk != null && pk.trim().length() > 0) {
				// 3:发送邮件
				sendMailForResume(releaseJobBO.getLinkman_email(), resumeBO);
				count += 1;
			}
		}
		return count;
	}

	/**
	 * 给公司发送邮件
	 * 
	 * @param email
	 */
	private void sendMailForResume(String email, HsResumeBO resumeBO ) {
		// 1给公司发送邮件
		MailSenderInfo mailInfo = new MailSenderInfo();
		mailInfo.setMailServerHost(PropertiesUtil.getProperty("mailServerHost"));
		mailInfo.setMailServerPort(PropertiesUtil.getProperty("mailServerPort"));
		mailInfo.setValidate(true);
		mailInfo.setUserName(PropertiesUtil.getProperty("mailSendUser"));
		String pwd = new String(Base64.decodeBase64(PropertiesUtil
				.getProperty("mailSendPwd")));
		mailInfo.setPassword(pwd);
		mailInfo.setFromAddress(PropertiesUtil.getProperty("mailSendUser"));
		mailInfo.setToAddress("273707977@qq.com");
		//邮箱标题
		mailInfo.setSubject(resumeBO.getName());
		//邮件内容--  简历信息
		String html;
		try {
			html = getResumeHtml(resumeBO);
			mailInfo.setContent(html);
			// 这个类主要来发送邮件
			MailSender sms = new MailSender();
			sms.sendHtmlMail(mailInfo);
		} catch (Exception e) {
			logger.error("投递简历--发送邮件失败！",e);
			throw new BusinessException("投递简历--发送邮件失败！");
		}
		/*String subject = resumeBO.getName();
		String server = "smtp.163.com";
		String u_name = PropertiesUtil.getProperty("mailSendUser");
		String u_pswd = new String(Base64.decodeBase64(PropertiesUtil
				.getProperty("mailSendPwd")));
		this.user_name = u_name;
		this.user_pswd = u_pswd;
		String to_mail = email;
		try {
			sendmail(subject , server, u_name, u_pswd, to_mail, resumeBO);
		} catch (Exception e) {
			e.printStackTrace();
			throw new BusinessException("投递简历--发送邮件失败！");
		}*/
	}


	/**获取需要发送的简历html
	 * 1、根据模版生成页面头部信息
	 * 2、根据简历信息，读取其余静态页面的html
	 * @return
	 * @throws Exception 
	 */
	private String getResumeHtml(HsResumeBO resume) throws Exception {
		StringBuffer html = new StringBuffer();
		Map<String,Object> param = new HashMap<String, Object>();
		// 获取basePath
		HttpServletRequest request = ServletActionContext.getRequest();
		String path = request.getContextPath();
		String basePath = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort() + path
				+ "/";
		param.put("basePath", basePath);
		// 学习路径
		HsLearnpathBO pathBo = new HsLearnpathBO();
		String id_card = "";
		if (null != SeentaoApplicationContext
				.getSession(ResourcesConstants.LOGIN_SESSION_KEY)) {
			id_card = ((UserSessionBean) SeentaoApplicationContext
					.getSession(ResourcesConstants.LOGIN_SESSION_KEY))
					.getIdentity_card();
		}

		pathBo.setIdentity_card(id_card);
		List<SupperBO> pathlist = pathDao.selectByIdentityCard(pathBo);
		String res_name = ((UserSessionBean) SeentaoApplicationContext.getSession(ResourcesConstants.LOGIN_SESSION_KEY)).getRes_name();
		param.put("res_name", res_name);
		param.put("pathlist", pathlist);
		ServletContext context = ServletActionContext.getServletContext();
		String template = getHtmlTopByTemplet(PropertiesUtil.getProperty("resumetemplet"), param, context);
		String html_top = template.substring(0, (template.indexOf("</h2>") + 5 ));
		html.append(html_top);
		try {
			String savePath = PropertiesUtil.getProperty(ResourcesConstants.UPLOAD_PATH);
			html.append(ReadTextUtil.getText( savePath + resume.getBaseinfo_path()).trim());
			html.append(ReadTextUtil.getText( savePath + resume.getDesire_path()).trim());
			html.append(ReadTextUtil.getText( savePath + resume.getEducation_path()).trim());
			html.append(ReadTextUtil.getText( savePath + resume.getEvaluate_path()).trim());
			html.append(ReadTextUtil.getText( savePath + resume.getPractice_path()).trim());
			html.append(ReadTextUtil.getText( savePath + resume.getProject_path()).trim());
			html.append(ReadTextUtil.getText( savePath + resume.getSkill_path()).trim());
			html.append(ReadTextUtil.getText( savePath + resume.getTrain_path()).trim());
			html.append(ReadTextUtil.getText( savePath + resume.getCertificate_path()).trim());
		} catch (Exception e) {
			logger.error("拼装简历内容失败！",e);
		}
		
		html.append(template.substring(template.indexOf("</h2>") + 5 ));
//		System.out.println("|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||");
//		System.out.println(html.toString());
//		System.out.println("|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||");
		return html.toString();
	}
	
	/**
     * 将解析之后的文件内容返回字符串
     * @param name 模板文件名
     * @param root 数据Map
     * @return
     */
    public static String getHtmlTopByTemplet(String templetPath,Map<String,Object> data, ServletContext context) {
       StringWriter out = new StringWriter();
       String templetEncode = "utf-8";
       try {
            //通过一个文件输出流，就可以写到相应的文件中
        	Configuration freemarkerCfg = new Configuration();
    		freemarkerCfg.setServletContextForTemplateLoading(context, "/");
    		// 设置对象包装器
    		freemarkerCfg.setObjectWrapper(new DefaultObjectWrapper());

    		// 设置异常处理器
    		freemarkerCfg.setTemplateExceptionHandler(TemplateExceptionHandler.IGNORE_HANDLER);
    		// 指定模版路径
    		Template template = freemarkerCfg.getTemplate(templetPath, templetEncode);
    		template.setEncoding(templetEncode);
    		template.process(data, out);
        } catch (IOException e) {
        	logger.error(e);
        } catch (TemplateException e) {
        	logger.error(e);
        } finally {
            try {
                if(out!=null) out.close();
            } catch (IOException e) {
            	logger.error(e);
            	e.printStackTrace();
            }
        }
       /* FreemakerUtil.createHTML(context, data, templetPath, htmlPath );
        String result = "";
		try {
			result = ReadTextUtil.getText(htmlPath);
		} catch (Exception e) {
			e.printStackTrace();
		}*/
        return out.toString();
    }


	@Override
	public HsPutresumeBO getByPK(String id) {
		return putResumeDAO.selectByPrimaryKey(id);
	}

	@Override
	public List<HsPutresumeBO> findByUserIdAndResId(String user_id, String res_id) {
		return putResumeDAO.findByUserIdAndResId(user_id, res_id);
	}
	
	
	/*public void sendmail(String subject, String server, String u_name, String u_pswd, String to_mail, HsResumeBO resume) throws Exception{
		Properties prop=new Properties();
        prop.setProperty("mail.transport.protocol","smtp");
        prop.setProperty("mail.smtp.auth","true");
        
        Session session=Session.getInstance(prop,new Authenticator(){//用户连接认证
            public PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(user_name,user_pswd);
            }
        });
        session.setDebug(true);//开启调试
        
        MimeMessage message=new MimeMessage(session);
        message.setFrom(new InternetAddress(PropertiesUtil.getProperty("mailSendUser")));
        message.setRecipients(Message.RecipientType.TO,InternetAddress.parse(to_mail));
        message.setSubject(subject);
        message.setSentDate(new Date());
        //message.setText(body);//发送纯文本消息
        //message.setContent(getAlternativeMultipart());//发送alternative邮件
        message.setContent(createResumeHtml(resume));//发送复杂文本消息
        message.saveChanges();//保存消息
        
        Transport trans=session.getTransport();
        trans.connect(server,u_name,u_pswd);
        trans.sendMessage(message,message.getRecipients(Message.RecipientType.TO));//发送
        trans.close();
	}

	private Multipart createResumeHtml(HsResumeBO resume) throws MessagingException, Exception {
		Multipart multi=new MimeMultipart("mixed");//混合MIME消息
		BodyPart html=new MimeBodyPart();
		html.setContent(getResumeHtml(resume), "text/html;charset=utf-8");
		multi.addBodyPart(html);
	    return multi;
	}*/
	
	
	
	
}
