package seentao.xhsn.sys.learnpathupload.action;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import jxl.Cell;
import jxl.Sheet;
import jxl.Workbook;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.apache.struts2.ServletActionContext;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import seentao.xhsn.bean.HsLearnpathBO;
import seentao.xhsn.bean.HsScoreCatalogBO;
import seentao.xhsn.common.ResourcesConstants;
import seentao.xhsn.common.SupperBO;
import seentao.xhsn.exception.BusinessException;
import seentao.xhsn.sys.learnpathupload.service.ILearnPathUploadService;
import seentao.xhsn.sys.scorecatalog.service.IScoreCatalogService;
import seentao.xhsn.tools.PropertiesUtil;

import com.opensymphony.xwork2.ActionSupport;

/**
 * @Description:学习路径上传填写和修改
 * @author 李君彦
 * @date 2014-11-24 下午3:07:41
 * @version V1.0
 */

@Controller
@Scope("prototype")
public class LearnPathUploadAction extends ActionSupport {
	private static final long serialVersionUID = 1L;
	private Logger logger = Logger.getLogger(LearnPathUploadAction.class);

	// 上传文件集合
	private List<File> file;
	// 上传文件名集合
	private List<String> fileFileName;
	// 上传文件内容类型集合
	private List<String> fileContentType;
	@Autowired
	private IScoreCatalogService scoreCatalogService;
	@Autowired
	private ILearnPathUploadService learnPathService;

	public String execute() throws Exception {
		// 解析excel
		if (file != null && file.size() > 0){
			readExcel();
		}
		return "SUCCESS";
	}

	private void readExcel() {
		List<SupperBO> list = new ArrayList<SupperBO>();
		FileInputStream fis =null;
		//获取成绩编目
		List<HsScoreCatalogBO> catalogList = scoreCatalogService.getAllByParam(new HsScoreCatalogBO());
		try {
			fis = new FileInputStream(file.get(0));
			Workbook book = Workbook.getWorkbook(fis);
			Sheet sheet = book.getSheet(0);
			HsLearnpathBO bo = null;
			Cell cell =null;
			for (int rowNum = 1; rowNum < sheet.getRows(); rowNum++) {
				cell = sheet.getCell(1, rowNum);
				String identity_card=cell.getContents();
				if(StringUtils.isNotEmpty(identity_card)){
					for(int i=0;i<catalogList.size();i++){
						bo = new HsLearnpathBO(); 
						bo.setIdentity_card(identity_card);
						bo.setScore_code(catalogList.get(i).getScore_code());
						cell = sheet.getCell(i+2, rowNum);
						bo.setScore(cell.getContents());
						list.add(bo);
					}
				}	
			}
			learnPathService.insertLearnPath(list);
		} catch (Exception e) {
			logger.error("导入失败!", e);
			throw new BusinessException(e, "导入失败!");
		} finally {
			try {
				if (fis != null)
					fis.close();
			} catch (IOException e) {
				logger.error("导入失败!", e);
				throw new BusinessException(e, "导入失败!");
			}

		}

	}

	// 执行上传功能
	private String uploadFile() throws FileNotFoundException, IOException {
		String savePath = PropertiesUtil
				.getProperty(ResourcesConstants.UPLOAD_PATH);
		FileOutputStream fos = null;
		FileInputStream fis = null;
		String filePath="";
		try {
			String dir = ServletActionContext.getServletContext().getRealPath(
					"/");
			String uploadPath = dir + savePath + File.separator
					+ "\\LearnPath\\";
			if (!new File(uploadPath).exists())
				new File(uploadPath).mkdirs();
			filePath=uploadPath + fileFileName.get(0);
			fos = new FileOutputStream(uploadPath + fileFileName.get(0));
			fis = new FileInputStream(file.get(0));
			byte[] buffer = new byte[1024];
			int len = 0;
			while ((len = fis.read(buffer)) > 0) {
				fos.write(buffer, 0, len);
			}
		} catch (Exception e) {
			logger.error("上传失败!", e);
			throw new BusinessException(e, "上传失败!");
		} finally {
			try {
				if (fos != null) {
					fos.flush();
					fos.close();
				}
				if (fis != null)
					fis.close();
			} catch (IOException e) {
				logger.error("上传失败!", e);
				throw new BusinessException(e, "上传失败!");
			}

		}
		return filePath;
	}
	
	public List<File> getFile() {
		return file;
	}

	public void setFile(List<File> file) {
		this.file = file;
	}

	public List<String> getFileFileName() {
		return fileFileName;
	}

	public void setFileFileName(List<String> fileFileName) {
		this.fileFileName = fileFileName;
	}

	public List<String> getFileContentType() {
		return fileContentType;
	}

	public void setFileContentType(List<String> fileContentType) {
		this.fileContentType = fileContentType;
	}
}