package seentao.xhsn.enterprise.sendInform.service.impl;

import java.text.SimpleDateFormat;

import org.apache.commons.codec.binary.Base64;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import seentao.xhsn.bean.HsInterviewInformBO;
import seentao.xhsn.enterprise.sendInform.dao.ISendInformDAO;
import seentao.xhsn.enterprise.sendInform.service.ISendInformService;
import seentao.xhsn.exception.BusinessException;
import seentao.xhsn.person.info.dao.IUBInfoDao;
import seentao.xhsn.tools.PropertiesUtil;
import seentao.xhsn.tools.mail.MailSender;
import seentao.xhsn.tools.mail.MailSenderInfo;

/**
 * @author wjx
 * @date 2014年12月4日 下午3:35:02
 * @note 发送面试通知Service的实现类
 */
@Service
public class SendInformServiceImpl implements ISendInformService {

	private static Logger logger=Logger.getLogger(SendInformServiceImpl.class);
	@Autowired
	private ISendInformDAO sendInformDAO;
	@Autowired
	private IUBInfoDao ubInfoDAO;

	@Override
	@Transactional
	public void insert(HsInterviewInformBO informBO) {
		// 保存面试通知
		sendInformDAO.insert(informBO);
		// 发送邮件
		String email = ubInfoDAO.getByPK(informBO.getUser_id()).getUser_email();
		sendInformForEmail(email, informBO);
	}

	/**
	 * 给个人发送面试邮件
	 * 
	 * @param email
	 *            邮件地址
	 */
	public void sendInformForEmail(String email, HsInterviewInformBO informBO) {
		// 1给公司发送邮件
		MailSenderInfo mailInfo = new MailSenderInfo();
		mailInfo.setMailServerHost(PropertiesUtil.getProperty("mailServerHost"));
		mailInfo.setMailServerPort(PropertiesUtil.getProperty("mailServerPort"));
		mailInfo.setValidate(true);
		mailInfo.setUserName(PropertiesUtil.getProperty("mailSendUser"));
		String pwd = new String(Base64.decodeBase64(PropertiesUtil
				.getProperty("mailSendPwd")));
		mailInfo.setPassword(pwd);
		mailInfo.setFromAddress(PropertiesUtil.getProperty("mailSendUser"));
		mailInfo.setToAddress(email);
		// 邮箱标题
		mailInfo.setSubject(informBO.getEnt_name() + "   " + informBO.getJob_name() + "   面试通知" );
		// 邮件内容-- 简历信息
		String html;
		SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd HH:mm");
		try {
			html = "<div style='width:582px; background:#FFF; margin-left:125px; margin-top:30px; background:FFF;'>"
					+ "<p style='line-height:50px; margin-left:50px;'>公司名称：<span id='ent_name'>" + informBO.getEnt_name() + "</span></p>"
					+ "<p style='line-height:50px; margin-left:50px;'>面试地址：<span id='ent_address'>" + informBO.getEnt_address() + "</span></p>"
					+ "<p style='line-height:50px; margin-left:50px;'>面试岗位：<span id='job_name' >" + informBO.getJob_name() + "</span></p>"
					+ "<p style='line-height:50px; margin-left:50px;'>联系人：<span id='interviewer'>" + informBO.getInterviewer() + "</span></p>"
					+ "<p style='line-height:50px; margin-left:50px;'>联系人电话：<span id='interviewer_phone'>" + informBO.getInterviewer_phone() + "</span></p>"
					+ "<p style='line-height:50px; margin-left:50px;'>需带资料：<span id='attach'>" + informBO.getAttach() + "</span></p>"
					+ "<p style='line-height:50px; margin-left:50px;'>面试时间：<span id='inform_date'>" + sf.format(informBO.getInform_date()) + "</span></p>"
				+ "</div>";
			mailInfo.setContent(html);
			// 这个类主要来发送邮件
			MailSender sms = new MailSender();
			sms.sendHtmlMail(mailInfo);
		} catch (Exception e) {
			logger.error("投递简历--发送邮件失败！", e);
			throw new BusinessException(e,"投递简历--发送邮件失败！");
		}

	}

	@Override
	public HsInterviewInformBO getByPK(String id) {
		return sendInformDAO.getByPK(id);
	}

	@Override
	public void updateByParam(HsInterviewInformBO informBO) {
		sendInformDAO.updateByParam(informBO);

	}

}
