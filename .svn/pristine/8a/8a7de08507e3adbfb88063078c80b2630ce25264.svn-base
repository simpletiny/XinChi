package seentao.xhsn.sys.trade.service.impl;

import java.util.Collections;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import seentao.xhsn.bean.HsTradeBO;
import seentao.xhsn.common.ResourcesConstants;
import seentao.xhsn.sys.trade.dao.ITradeDAO;
import seentao.xhsn.sys.trade.service.ITradeService;
import seentao.xhsn.tools.ArrayBoUtil;
import seentao.xhsn.tools.CompareUtil;
import seentao.xhsn.tools.Page;

/** 
 * @author wjx 
 * @date 2015年1月7日 下午2:06:17 
 * @note 
 */
@Service
@Transactional
public class TradeServiceImpl implements ITradeService {

	@Autowired
	private ITradeDAO dao;
	
	@Override
	public List<HsTradeBO> findAllTradeByPage(Page<HsTradeBO> page) {
		return dao.findAllTradeByPage(page);
	}
	@Override
	public List<HsTradeBO> findAllTrade() {
		return dao.findAllTrade(new HsTradeBO());
	}

	@Override
	public HsTradeBO getByPK(String id) {
		return dao.getByPK(id);
	}

	@Override
	public int saveTrade(HsTradeBO bo) {
		int count = -1;
		if(bo.getId() != null && bo.getId().length() > 0){
			HsTradeBO bean = dao.getByPK(bo.getId());
			ArrayBoUtil.updateByObject(ResourcesConstants.ARRAY_TRADE, bean);
			count = dao.updateTrade(bo);
		}else{
			// 校验code是否符合规范
			if(validateCode(bo)){
				ResourcesConstants.ARRAY_TRADE.add(bo);
				count =  dao.insertTrade(bo) != null ? 1 : 0 ;
			}else{
				count =  0;
			}
		}
		//排序，按sort字段排序
		Collections.sort(ResourcesConstants.ARRAY_TRADE, 
				CompareUtil.createComparator(1, "sort"));
		return count;
	}

	private boolean validateCode(HsTradeBO bo) {
		boolean flag = true;
		if(bo == null || bo.getTrad_code() == null){
			System.err.println("error================参数不能为空！");
			return false;
		}else{
			String code = bo.getTrad_code();
			String regex = "^[0-9][0-9]$";
			if(!code.matches(regex)){
				System.err.println("error================编码格式错误！");
				return false;
			}
		}
		// 2、根据code校验数据库是否存在
		HsTradeBO param = new HsTradeBO();
		param.setTrad_code(bo.getTrad_code());
		List<HsTradeBO> results = dao.findAllTrade(param);
		if(results != null && results.size() > 0 && results.get(0) != null && results.get(0).getId() != null){
			System.err.println("error================该编码已存在！");
			return false;
		}
		return flag;
	}
	@Override
	public int deleteTrade(String id) {
		return dao.deleteTrade(id);
	}

}
