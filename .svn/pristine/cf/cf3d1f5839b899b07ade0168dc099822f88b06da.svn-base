package seentao.xhsn.login.action;

import java.sql.Timestamp;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.apache.struts2.ServletActionContext;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import seentao.xhsn.bean.HsUserBO;
import seentao.xhsn.common.DictionaryEnum;
import seentao.xhsn.common.ResourcesConstants;
import seentao.xhsn.common.SeentaoApplicationContext;
import seentao.xhsn.common.UserSessionBean;
import seentao.xhsn.exception.BusinessException;
import seentao.xhsn.login.bean.LoginBean;
import seentao.xhsn.login.service.ILoginService;
import seentao.xhsn.login.util.PassWordUtil;

import com.opensymphony.xwork2.ActionSupport;

/**
 * @Description:登陆action
 * @author 李君彦
 * @date 2014-11-17 下午3:46:26
 * @version V1.0
 */
@Controller
@Scope("prototype")
public class LoginAction extends ActionSupport {

	private static final long serialVersionUID = 1L;
	private Logger logger = Logger.getLogger(LoginAction.class);
	// 个人登录
	private LoginBean person;
	// 企业登录
	private LoginBean corp;
	// 1 个人登录 2 企业登陆
	private String type;

	private String tip;

	private HsUserBO bo;

	private String mailAddress;

	private String afterLoginUrl;

	@Autowired
	private ILoginService loginService;

	/**
	 * 登录
	 * 
	 * @return
	 */
	public String login() {
		LoginBean bean = null;
		if (DictionaryEnum.PERSON_TYPE.getStringValue().equals(type)) {
			// 个人用户
			bean = person;
			if (!this.validateFiled(person)) {
				return "FAIL";
			}
			bean.setType(Integer.valueOf(type));
			bo = loginService.login_user(bean);
			afterLoginUrl = ResourcesConstants.PERSON_LOGIN_URL;

		} else {
			bean = corp;
			// 校验字段
			if (!this.validateFiled(bean)) {
				return "FAIL";
			}
			// 校验用户名 密码是否正确
			bo = this.check(bean);
			afterLoginUrl = ResourcesConstants.ENTERPRISE_LOGIN_URL;
		}

		if (bo == null) {
			this.tip = getText("loginFailTip");
			return "FAIL";
		} else {
			if (DictionaryEnum.MAIL_CLOSED.getIntValue() == bo.getUser_isopen()) {
				// 未激活验证
				String mail = bo.getUser_email();
				mailAddress = "http://mail." + mail.substring(mail.indexOf("@") + 1, mail.length());
				if (DictionaryEnum.PERSON_TYPE.getStringValue().equals(type)) {
					// 个人未验证
					return "CONFIRM_PERSON";
				} else {
					return "CONFIRM";
				}
			}
			// 企业修改登陆信息（登陆次数和最后登录时间） 个人统一在通用注册记录
			if (DictionaryEnum.ENTERPRISE_TYPE.getStringValue().equals(type))
				this.updateLoginInfo(bo);
			// 保存cookie
			this.addCookie(bean, type);
			UserSessionBean sessionBean = new UserSessionBean();
			try {
				PropertyUtils.copyProperties(sessionBean, bo);
			} catch (Exception e) {
				logger.error("设置session失败", e);
				throw new BusinessException(e);
			}
			sessionBean.setUser_sys_id(bo.getId());
			sessionBean.setUser_email(bo.getUser_email());
			sessionBean.setUser_type(bo.getUser_type());
			sessionBean.setUser_id(bo.getUser_id());
			sessionBean.setPhoto_url(bo.getPhoto_url());
			if (DictionaryEnum.PERSON_TYPE.getStringValue().equals(String.valueOf(bo.getUser_type()))) {
				sessionBean.setRes_id(bo.getRes_id());
				sessionBean.setRes_name(bo.getRes_name());
				sessionBean.setUser_phone(bo.getUser_phone());
				sessionBean.setIdentity_card(bo.getIdentity_card());
				// 如果是个人，就跳转到个人信息编辑页面，加载页面需要信息
				afterLoginUrl += "?lm_tab_name=" + ResourcesConstants.LEFT_MENU_MYSELF;
			}
			SeentaoApplicationContext.setSession(ResourcesConstants.LOGIN_SESSION_KEY, sessionBean);
		}

		return "SUCCESS";
	}

	public String logout() {
		HttpSession map = ServletActionContext.getRequest().getSession();
		map.invalidate();
		return "SUCCESS";
	}

	/**
	 * 字段校验
	 * 
	 * @param bean
	 * @return
	 */
	private boolean validateFiled(LoginBean bean) {
		if (!this.validateUserName(bean))
			return false;
		if (!this.validatePwd(bean))
			return false;
		return true;
	}

	private boolean validateUserName(LoginBean bean) {
		if (StringUtils.isEmpty(bean.getUser_mail())) {
			this.tip = getText("nullNameTip");
			return false;
		}
		String reg = ResourcesConstants.MAIL_REG;
		if (!bean.getUser_mail().matches(reg)) {
			this.tip = getText("errorNameTip");
			return false;
		}
		return true;
	}

	private boolean validatePwd(LoginBean bean) {
		if (StringUtils.isEmpty(bean.getUser_pwd())) {
			this.tip = getText("nullPwdTip");
			return false;
		}
		return true;
	}

	/**
	 * 修改登陆信息
	 * 
	 * @param bo
	 */
	private void updateLoginInfo(HsUserBO bo) {
		HsUserBO hsUserBO = new HsUserBO();
		hsUserBO.setUser_lastlogintime(new Timestamp(System.currentTimeMillis()));
		int loginnum = bo.getUser_loginnum() == null ? 0 : bo.getUser_loginnum().intValue();
		hsUserBO.setUser_loginnum(loginnum + 1);
		hsUserBO.setId(bo.getId());
		loginService.updateLoginInfo(hsUserBO);
	}

	/**
	 * 校验登录
	 * 
	 * @param bean
	 */
	private HsUserBO check(LoginBean bean) {
		String pwd = PassWordUtil.createPassword(bean.getUser_pwd());
		return loginService.getUserBeanByLoginInfo(bean.getUser_mail(), pwd, type);
	}

	private void addCookie(LoginBean bean, String type) {
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		if (StringUtils.isNotBlank(bean.getUser_mail()) && StringUtils.isNotBlank(bean.getUser_pwd())) {
			// 创建Cookie
			Cookie nameCookie = null;
			Cookie pwdCookie = null;
			// 个人用户
			if (DictionaryEnum.PERSON_TYPE.getStringValue().equals(type)) {
				nameCookie = new Cookie("person_username", bean.getUser_mail());
				pwdCookie = new Cookie("person_pwd", bean.getUser_pwd());
			} else {
				// 企业用户
				nameCookie = new Cookie("corp_username", bean.getUser_mail());
				pwdCookie = new Cookie("corp_pwd", bean.getUser_pwd());
			}
			// 设置Cookie的父路径
			nameCookie.setPath(request.getContextPath() + "/");
			pwdCookie.setPath(request.getContextPath() + "/");
			// 判断是否保存Cookie
			if ("true".equals(bean.getRemember_flag())) {
				nameCookie.setMaxAge(7 * 24 * 60 * 60);
				pwdCookie.setMaxAge(7 * 24 * 60 * 60);
			} else {
				nameCookie.setMaxAge(0);
				pwdCookie.setMaxAge(0);
			}
			// 加入Cookie到响应头
			response.addCookie(nameCookie);
			response.addCookie(pwdCookie);
		}
	}

	public LoginBean getPerson() {
		return person;
	}

	public void setPerson(LoginBean person) {
		this.person = person;
	}

	public LoginBean getCorp() {
		return corp;
	}

	public void setCorp(LoginBean corp) {
		this.corp = corp;
	}

	public String getType() {
		return type;
	}

	public void setType(String type) {
		this.type = type;
	}

	public String getTip() {
		return tip;
	}

	public void setTip(String tip) {
		this.tip = tip;
	}

	public HsUserBO getBo() {
		return bo;
	}

	public void setBo(HsUserBO bo) {
		this.bo = bo;
	}

	public String getMailAddress() {
		return mailAddress;
	}

	public void setMailAddress(String mailAddress) {
		this.mailAddress = mailAddress;
	}

	public String getAfterLoginUrl() {
		return afterLoginUrl;
	}

	public void setAfterLoginUrl(String afterLoginUrl) {
		this.afterLoginUrl = afterLoginUrl;
	}

}
