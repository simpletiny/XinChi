package seentao.xhsn.enterprise.manageresume.service.impl;

import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Iterator;
import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import seentao.xhsn.bean.HsEtpFollowResumeBO;
import seentao.xhsn.bean.HsEtpStoreResumeBO;
import seentao.xhsn.bean.HsInterviewInformBO;
import seentao.xhsn.bean.HsPutresumeBO;
import seentao.xhsn.bean.HsResumeBO;
import seentao.xhsn.bean.HsResumeVisitorBO;
import seentao.xhsn.common.ResourcesConstants;
import seentao.xhsn.common.SeentaoApplicationContext;
import seentao.xhsn.common.UserSessionBean;
import seentao.xhsn.enterprise.followresume.dao.IFollowResumeDAO;
import seentao.xhsn.enterprise.manageresume.bean.ManageResumeBean;
import seentao.xhsn.enterprise.manageresume.service.IManageResumeService;
import seentao.xhsn.enterprise.sendInform.dao.ISendInformDAO;
import seentao.xhsn.enterprise.sendInform.service.ISendInformService;
import seentao.xhsn.enterprise.storeresume.dao.IStoreResumeDAO;
import seentao.xhsn.person.hsuser.dao.IHsUserDAO;
import seentao.xhsn.person.put.dao.IPutResumeDAO;
import seentao.xhsn.person.resume.dao.IResumeDAO;
import seentao.xhsn.person.resumevisitor.dao.IResumeVisitorDAO;
import seentao.xhsn.sys.dictionaryfiledmap.dao.IDictionaryFieldMapDao;
import seentao.xhsn.tools.Page;

@Service
public class ManageResumeServiceImpl implements IManageResumeService {
	private Logger logger = Logger.getLogger(ManageResumeServiceImpl.class);
	@Autowired
	private IPutResumeDAO putDao;
	@Autowired
	private IDictionaryFieldMapDao dicDao;
	@Autowired
	private ISendInformService sendInformService;

	@Override
	public List<ManageResumeBean> fetchResume(Page<ManageResumeBean> page, String type) {
		List<ManageResumeBean> list = new ArrayList<ManageResumeBean>();
		if (type.equals("sd")) {
			list = putDao.getReceivedResumeByPage(page);
			Iterator<ManageResumeBean> iter = list.iterator();
			while (iter.hasNext()) {
				ManageResumeBean bean = iter.next();
				bean.setGender(bean.getGender().equals("0") ? "男" : "女");
				bean.setAge(calculateAge(bean.getBirthday()) + "周岁");
				SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd");
				bean.setDate(sf.format(bean.getPutdatetime()));
				if (bean.getExp_year() != null) {
					String exp_year = dicDao.getDictByParam("hs_userbasicinfo", "job_exp_year", bean.getExp_year())
							.get("value");
					bean.setExp_year(exp_year);
				}
			}
		} else {
			list = putDao.getCareResumeByPage(page);
			Iterator<ManageResumeBean> iter = list.iterator();
			while (iter.hasNext()) {
				ManageResumeBean bean = iter.next();
				bean.setGender(bean.getGender().equals("0") ? "男" : "女");
				bean.setAge(calculateAge(bean.getBirthday()) + "周岁");
				SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd");
				bean.setDate(sf.format(bean.getPutdatetime()));
				if (bean.getExp_year() != null) {
					String exp_year = dicDao.getDictByParam("hs_userbasicinfo", "job_exp_year", bean.getExp_year())
							.get("value");
					bean.setExp_year(exp_year);
				}
			}
		}
		return list;
	}

	private String calculateAge(Timestamp date) {
		if (null == date)
			return "0";
		Calendar c1 = Calendar.getInstance();
		c1.setTime(date);
		Calendar c2 = Calendar.getInstance();
		int yearBirth = c1.get(Calendar.YEAR);
		int monthBirth = c1.get(Calendar.MONTH);
		int dayBirth = c1.get(Calendar.DATE);

		int yearNow = c2.get(Calendar.YEAR);
		int monthNow = c2.get(Calendar.MONTH);
		int dayNow = c2.get(Calendar.DATE);

		int age = yearNow - yearBirth;
		if (monthNow <= monthBirth) {
			if (monthNow == monthBirth) {
				if (dayNow < dayBirth) {
					age--;
				}
			} else {
				age--;
			}
		}
		return age + "";
	}

	@Autowired
	private ISendInformDAO sendDao;
	@Autowired
	private IFollowResumeDAO followDao;
	@Autowired
	private IResumeDAO resumeDao;
	@Autowired
	private IHsUserDAO userDao;

	@Override
	@Transactional
	public String sendInforms(String ids, HsInterviewInformBO informBO, String type) {
		if (null == ids || ids.equals(""))
			return "NONE";
		SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd HH:mm");
		String[] arrId = ids.split(",");
		if (type != null) {
			if (type.equals("sd")) {
				for (String id : arrId) {
					HsPutresumeBO putbo = new HsPutresumeBO();
					putbo = putDao.selectByPrimaryKey(id);
					informBO.setRes_id(putbo.getRes_id());
					informBO.setJob_id(putbo.getJob_id());
					informBO.setUser_id(putbo.getUser_id());
					try {
						informBO.setInform_date(new Timestamp(sf.parse(informBO.getInform_time()).getTime()));
					} catch (ParseException e) {
						logger.warn("面试日期转化失败");
						e.printStackTrace();
						return "ERROR";
					}
					sendDao.insert(informBO);

					String email = userDao.selectByPrimaryKey(informBO.getUser_id()).getUser_email();
					sendInformService.sendInformForEmail(email, informBO);
				}
			} else if (type.equals("gz")) {
				for (String id : arrId) {
					HsEtpFollowResumeBO followbo = new HsEtpFollowResumeBO();
					followbo = followDao.selectByPrimaryKey(id);
					HsResumeBO resbo = resumeDao.selectByPrimaryKey(followbo.getRes_id());
					informBO.setRes_id(followbo.getRes_id());
					// informBO.setJob_id(putbo.getJob_id());
					informBO.setUser_id(resbo.getUser_id());
					try {
						informBO.setInform_date(new Timestamp(sf.parse(informBO.getInform_time()).getTime()));
					} catch (ParseException e) {
						logger.warn("面试日期转化失败");
						e.printStackTrace();
						return "ERROR";
					}
					sendDao.insert(informBO);
					String email = userDao.selectByPrimaryKey(informBO.getUser_id()).getUser_email();
					sendInformService.sendInformForEmail(email, informBO);
				}
			}
		} else {
			for (String id : arrId) {
				HsResumeBO resBo = new HsResumeBO();
				resBo = resumeDao.selectByPrimaryKey(id);
				informBO.setRes_id(id);
				informBO.setUser_id(resBo.getUser_id());
				try {
					informBO.setInform_date(new Timestamp(sf.parse(informBO.getInform_time()).getTime()));
				} catch (ParseException e) {
					logger.warn("面试日期转化失败");
					e.printStackTrace();
					return "ERROR";
				}
				sendDao.insert(informBO);
				String email = userDao.selectByPrimaryKey(informBO.getUser_id()).getUser_email();
				sendInformService.sendInformForEmail(email, informBO);
			}
		}

		return "OK";
	}

	@Autowired
	private IStoreResumeDAO storeDao;

	@Override
	@Transactional
	public String restoreResume(String ids, String type) {
		if (null == ids || ids.equals(""))
			return "NONE";
		String etp_id = ((UserSessionBean) SeentaoApplicationContext.getSession(ResourcesConstants.LOGIN_SESSION_KEY))
				.getUser_id();
		String[] arrId = ids.split(",");
		if (type.equals("sd")) {
			for (String id : arrId) {
				HsPutresumeBO putbo = new HsPutresumeBO();
				putbo = putDao.selectByPrimaryKey(id);
				String res_id = putbo.getRes_id();
				HsEtpStoreResumeBO storebo = new HsEtpStoreResumeBO();
				storebo.setRes_id(res_id);
				storebo.setEtp_id(etp_id);

				storeDao.insert(storebo);
			}
		} else {
			for (String id : arrId) {
				HsEtpFollowResumeBO followbo = new HsEtpFollowResumeBO();
				followbo = followDao.selectByPrimaryKey(id);
				String res_id = followbo.getRes_id();
				HsEtpStoreResumeBO storebo = new HsEtpStoreResumeBO();
				storebo.setRes_id(res_id);
				storebo.setEtp_id(etp_id);
				storeDao.insert(storebo);
			}
		}

		return "OK";
	}

	@Autowired
	private IResumeVisitorDAO visitDao;

	@Override
	@Transactional
	public String getViewResume(String res_id) {
		String htmlPath = "";
		String etp_id = ((UserSessionBean) SeentaoApplicationContext.getSession(ResourcesConstants.LOGIN_SESSION_KEY))
				.getUser_id();

		HsResumeBO resBo = resumeDao.selectByPrimaryKey(res_id);
		HsPutresumeBO sbo = new HsPutresumeBO();
		sbo.setRes_id(res_id);
		sbo.setEtp_id(etp_id);

		List<HsPutresumeBO> arrPut = putDao.getAllByParam(sbo);
		if (null != arrPut && arrPut.size() > 0) {
			HsPutresumeBO bo = arrPut.get(0);
			bo.setIssee("Y");
			putDao.update(bo);

			HsResumeVisitorBO vbo = new HsResumeVisitorBO();
			vbo.setRes_id(res_id);
			vbo.setUser_id(resBo.getUser_id());
			vbo.setEnt_id(etp_id);
			List<HsResumeVisitorBO> arrVisitor = visitDao.getAllByParam(vbo);
			if (null != arrVisitor && arrVisitor.size() > 0) {
				vbo = arrVisitor.get(0);
				vbo.setVisitCnt(vbo.getVisitCnt() + 1);
				visitDao.update(vbo);
			} else {
				vbo.setVisitCnt(1);
				visitDao.insert(vbo);
			}
		} else {
			HsResumeVisitorBO vbo = new HsResumeVisitorBO();
			vbo.setRes_id(res_id);
			vbo.setUser_id(resBo.getUser_id());
			vbo.setEnt_id(etp_id);
			List<HsResumeVisitorBO> arrVisitor = visitDao.getAllByParam(vbo);
			if (null != arrVisitor && arrVisitor.size() > 0) {
				vbo = arrVisitor.get(0);
				vbo.setVisitCnt(vbo.getVisitCnt() + 1);
				visitDao.update(vbo);
			} else {
				vbo.setVisitCnt(1);
				visitDao.insert(vbo);
			}

		}
		htmlPath = resBo.getStatic_path();
		return htmlPath;
	}

	@Override
	@Transactional
	public String followResume(String ids, String type) {
		if (null == ids || ids.equals(""))
			return "NONE";

		String etp_id = ((UserSessionBean) SeentaoApplicationContext.getSession(ResourcesConstants.LOGIN_SESSION_KEY))
				.getUser_id();
		String[] arrId = ids.split(",");
		if (null != type) {

			for (String id : arrId) {
				HsPutresumeBO putbo = new HsPutresumeBO();
				putbo = putDao.selectByPrimaryKey(id);
				String res_id = putbo.getRes_id();
				HsEtpFollowResumeBO followbo = new HsEtpFollowResumeBO();
				followbo.setRes_id(res_id);
				followbo.setEtp_id(etp_id);
				followDao.insert(followbo);
			}
		} else {
			for (String id : arrId) {
				HsEtpFollowResumeBO followbo = new HsEtpFollowResumeBO();
				followbo.setRes_id(id);
				followbo.setEtp_id(etp_id);
				followDao.insert(followbo);
			}
		}

		return "OK";
	}

	@Override
	@Transactional
	public String cancelFollowResume(String ids) {
		if (null == ids || ids.equals(""))
			return "NONE";
		String[] arrId = ids.split(",");
		for (String id : arrId) {
			followDao.delete(id);
		}
		return "OK";
	}
}
