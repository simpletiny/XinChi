package seentao.xhsn.sys.person.service.impl;

import java.io.ByteArrayOutputStream;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.struts2.ServletActionContext;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import seentao.xhsn.bean.HsResumeBO;
import seentao.xhsn.bean.HsTaskBO;
import seentao.xhsn.common.ResourcesConstants;
import seentao.xhsn.person.resume.dao.IResumeDAO;
import seentao.xhsn.sys.person.bean.PersonResumeBean;
import seentao.xhsn.sys.person.bean.PersonSearchBean;
import seentao.xhsn.sys.person.service.IPersonService;
import seentao.xhsn.sys.seentaotask.service.ISeenTaoTaskService;
import seentao.xhsn.tools.ExcelUtil;
import seentao.xhsn.tools.Page;
import seentao.xhsn.tools.PropertiesUtil;

@Service
public class PersonServiceImpl implements IPersonService {
	@Autowired
	private IResumeDAO resumeDao;

	@Override
	public List<PersonResumeBean> searchResume(Page page) {
		List<PersonResumeBean> list = new ArrayList<PersonResumeBean>();
		list = resumeDao.getResumeForAdminByPage(page);
		Iterator<PersonResumeBean> iter = list.iterator();
		SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd");
		while (iter.hasNext()) {
			PersonResumeBean bean = iter.next();
			bean.setGender(bean.getGender().equals("0") ? "男" : "女");
			if (null != bean.getModify_time()) {
				try {
					bean.setModify_time(sf.format(sf.parse(bean.getModify_time())));
				} catch (ParseException e) {
					bean.setModify_time(null);
					continue;
				}
			}
			if (null != bean.getCreate_time()) {
				try {
					bean.setCreate_time(sf.format(sf.parse(bean.getModify_time())));
				} catch (ParseException e) {
					bean.setCreate_time(null);
					continue;
				}
			}
		}
		return list;
	}

	@Override
	@Transactional
	public void autoOpenResume(String[] param) {
		HsResumeBO bo = new HsResumeBO();
		if (param != null && param.length > 0) {
			bo.setId(param[0]);
			bo.setIsopen("Y");
		}
		resumeDao.update(bo);
	}

	@Autowired
	private ISeenTaoTaskService taskService;

	@Override
	@Transactional
	public String closeResume(String res_id) {
		// 更新数据库
		HsResumeBO bo = new HsResumeBO();
		bo.setId(res_id);
		bo.setIsopen("N");
		resumeDao.update(bo);
		// 添加计划任务
		HsTaskBO task = new HsTaskBO();
		Calendar c = Calendar.getInstance();
		c.setTimeInMillis(System.currentTimeMillis());
		c.add(Calendar.MONTH, 3);
		task.setExecuteTime(new Timestamp(c.getTimeInMillis()));
		task.setExecutor("personServiceImpl");
		task.setMethod("autoOpenResume");
		task.setParameters(res_id);
		task.setTaskType(ResourcesConstants.TASK_ONETIME);
		task.setIsdone("N");
		taskService.addTask(task);
		return "OK";
	}

	@Override
	@Transactional
	public String openResume(String res_id) {
		HsResumeBO bo = new HsResumeBO();
		bo.setId(res_id);
		bo.setIsopen("Y");
		resumeDao.update(bo);
		// 去除任务列表中相关的任务
		HsTaskBO task = new HsTaskBO();
		task.setExecutor("personServiceImpl");
		task.setMethod("autoOpenResume");
		task.setParameters(res_id);
		taskService.removeTask(task);
		return "OK";
	}

	@Override
	public void exportExcel(ByteArrayOutputStream output, PersonSearchBean ps) {
		String templet = ServletActionContext.getServletContext().getRealPath("/");
		templet += PropertiesUtil.getProperty("userinfoExcelTemplet");
		Map<Integer, List<Object>> data = new HashMap<Integer, List<Object>>();
		List<PersonResumeBean> list = new ArrayList<PersonResumeBean>();
		list = resumeDao.getResumeForAdminByBo(ps);
		for (int i = 0; i < list.size(); i++) {
			PersonResumeBean pr = list.get(i);
			List<Object> rowList = new ArrayList<Object>();
			rowList.add(pr.getLogin_name());
			rowList.add(pr.getUser_name());
			rowList.add(pr.getGender().equals("0") ? "男" : "女");
			rowList.add(pr.getUser_email());
			rowList.add(pr.getCellphone());
			rowList.add(pr.getRegist_time());
			data.put(i + 1, rowList);
		}
		try {
			ExcelUtil.writeDataRowByRow(data, templet, output);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
