package seentao.xhsn.mail.action;

import java.sql.Timestamp;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.lang3.StringUtils;
import org.apache.struts2.ServletActionContext;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import seentao.xhsn.bean.HsUserBO;
import seentao.xhsn.common.DictionaryEnum;
import seentao.xhsn.login.service.ILoginService;
import seentao.xhsn.mail.service.IMailConfirmService;
import seentao.xhsn.regist.service.IRegistService;

import com.opensymphony.xwork2.ActionSupport;

/**
 * @Description:邮件验证
 * @author 李君彦
 * @date 2014-11-20 上午10:20:59 
 * @version V1.0   
 */
@Controller
@Scope("prototype")
public class MailConfirmAction extends ActionSupport{

	private static final long serialVersionUID = 1L;

	//验证编码
	private String p;
	
	private String tip;
	
	private HsUserBO bo;
	
	@Autowired
	private IMailConfirmService mailConfirmService;
	@Autowired
	private ILoginService loginService;
	@Autowired
	private IRegistService registService;
	
	public String confirm(){
		if(StringUtils.isEmpty(p)){
			this.tip=getText("errorTip");
			return "ERROR";
		}
		//解析验证码
		String[] codes=this.analyzeCode() ;
		if(codes==null){
			this.tip=getText("errorTip");
			return "ERROR";
		}
		String user_id=codes[0];
		String send_time=codes[2];
		//判断用户是否已验证
		bo = mailConfirmService.getUserByPrimaryKey(user_id);
		if(bo==null){
			this.tip=getText("nullTip");
			return "ERROR";
		}
		if(DictionaryEnum.MAIL_CLOSED.getIntValue()==bo.getUser_isopen()){
			//查询验证码是否是发给用户的验证码
			if(!this.p.equals(bo.getSend_code())){
				this.tip=getText("errorTip");
				return "ERROR";
			}
			//判断验证是否失效
			long diff=(new Date().getTime()-Long.valueOf(send_time))/(60*60*1000);
			if(diff>=24){
				this.tip=getText("loseTip");
				return "ERROR";
			}
			//更新用户验证信息
			this.updateUserInfo(bo);
		}
		return "SUCCESS";
	}
	
	/**
	 * 重新发送验证邮件
	 * @return
	 */
	public String resend(){
		HttpServletRequest request = ServletActionContext.getRequest();
		String path = request.getContextPath();
		String basePath = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+path+"/";
		this.registService.sendEmail(bo, basePath);
		return "SUCCESS";
	}
	
	/**
	 * 修改验证信息
	 * @param bo
	 */
	private void updateUserInfo(HsUserBO bo) {
		HsUserBO hsUserBO=new HsUserBO();
		hsUserBO.setUser_isopen(DictionaryEnum.MAIL_OPEN.getIntValue());
		hsUserBO.setUser_opentime(new Timestamp(System.currentTimeMillis()));
		hsUserBO.setId(bo.getId());
		loginService.updateLoginInfo(hsUserBO);
	}
	
	/**
	 * 解析验证码(用户主键+md5（主键）+时间)
	 * @return
	 */
	private String[] analyzeCode(){
		String code=new String(Base64.decodeBase64(p));
		String[] codes=code.split("&");
		if(codes!=null&&codes.length==3)
			return codes;
		return null;
	}

	public String getP() {
		return p;
	}

	public void setP(String p) {
		this.p = p;
	}

	public String getTip() {
		return tip;
	}

	public void setTip(String tip) {
		this.tip = tip;
	}

	public HsUserBO getBo() {
		return bo;
	}

	public void setBo(HsUserBO bo) {
		this.bo = bo;
	}
	
	
}
