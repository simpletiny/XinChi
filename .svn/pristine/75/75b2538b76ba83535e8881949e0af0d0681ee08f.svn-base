package seentao.xhsn.person.resume.service.impl;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.apache.struts2.ServletActionContext;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import seentao.xhsn.bean.HsCertificateBO;
import seentao.xhsn.bean.HsCustomSkillBO;
import seentao.xhsn.bean.HsDesiredPositionBO;
import seentao.xhsn.bean.HsEducationBO;
import seentao.xhsn.bean.HsEvaluateBO;
import seentao.xhsn.bean.HsLearnpathBO;
import seentao.xhsn.bean.HsResumeBO;
import seentao.xhsn.bean.HsResumejobexperienceBO;
import seentao.xhsn.bean.HsSubjoinBO;
import seentao.xhsn.bean.HsTrainingBO;
import seentao.xhsn.bean.HsUbCompanyBO;
import seentao.xhsn.bean.HsUserBO;
import seentao.xhsn.bean.HsUserbasicinfoBO;
import seentao.xhsn.common.ResourcesConstants;
import seentao.xhsn.common.SeentaoApplicationContext;
import seentao.xhsn.common.SupperBO;
import seentao.xhsn.common.UserSessionBean;
import seentao.xhsn.exception.BusinessException;
import seentao.xhsn.person.certificate.bean.HsCertificateExtendBO;
import seentao.xhsn.person.certificate.dao.ICertificateDAO;
import seentao.xhsn.person.company.dao.IUBCompanyDAO;
import seentao.xhsn.person.customskill.bean.HsCustomSkillExtendBO;
import seentao.xhsn.person.customskill.dao.ICustomSkillDAO;
import seentao.xhsn.person.desired.dao.IDesiredPositionDao;
import seentao.xhsn.person.education.bean.HsEducationExtendBO;
import seentao.xhsn.person.education.dao.IEducationDAO;
import seentao.xhsn.person.evaluate.dao.IEvaluateDao;
import seentao.xhsn.person.experience.dao.IExperienceDAO;
import seentao.xhsn.person.hssubjoin.dao.IHsSubjoinDAO;
import seentao.xhsn.person.hsuser.dao.IHsUserDAO;
import seentao.xhsn.person.info.dao.IUBInfoDao;
import seentao.xhsn.person.learnpath.dao.ILearnPathDAO;
import seentao.xhsn.person.resume.dao.IResumeDAO;
import seentao.xhsn.person.resume.service.IResumeService;
import seentao.xhsn.person.train.dao.ITrainingDAO;
import seentao.xhsn.sys.dictionaryfiledmap.dao.IDictionaryFieldMapDao;
import seentao.xhsn.sys.dictionaryfiledmap.service.IDictionaryFieldMapService;
import seentao.xhsn.tools.FreemakerUtil;
import seentao.xhsn.tools.MD5Util;
import seentao.xhsn.tools.PropertiesUtil;

/**
 * 简历接口实现类
 * 
 * @author niushixing 2014-11-27 下午1:28:22
 * 
 */
@Service
public class ResumeServiceImpl implements IResumeService {

	private Logger logger = Logger.getLogger(ResumeServiceImpl.class);
	@Autowired
	private IResumeDAO resumeDao;
	@Autowired
	private ITrainingDAO trainingDao;
	@Autowired
	private IUBCompanyDAO ubComDao;
	@Autowired
	private IEducationDAO eduDao;
	@Autowired
	private ICustomSkillDAO csDao;
	@Autowired
	private IDesiredPositionDao desiredDao;
	@Autowired
	private IExperienceDAO jobexpDao;
	@Autowired
	private IUBInfoDao ubDao;
	@Autowired
	private IHsUserDAO userDao;
	@Autowired
	private IHsSubjoinDAO subDao;
	@Autowired
	private ICertificateDAO cerDao;
	@Autowired
	private IDictionaryFieldMapDao dicDao;
	@Autowired
	private ILearnPathDAO pathDao;
	@Autowired
	private IEvaluateDao evaluateDao;
	@Autowired
	private IDictionaryFieldMapService dictFieldMapService;
	@Autowired
	private ServletContext context;

	@Override
	@Transactional
	public String generateResumeHTML(HsResumeBO bo, ServletContext context) {
		// sub.photo_file_id
		// desire.job_type

		// 模板用data
		Map<String, Object> data = new HashMap<String, Object>();

		// 当前登录用户Id
		String user_id = bo.getUser_id();
		String res_id = bo.getId();
		// 简历基本信息
		HsResumeBO res = resumeDao.selectByPrimaryKey(res_id);
		// 通过Id取得用户信息
		HsUserBO user = new HsUserBO();
		user = userDao.selectByPrimaryKey(user_id);
		// 用户基本信息
		HsUserbasicinfoBO ub = new HsUserbasicinfoBO();
		ub = ubDao.getByUserSysId(user_id);

		if (null != ub) {
			// 用户性别转化为汉字
			if (null != ub.getUser_gender()) {
				ub.setUser_gender(dicDao.getDictByParam("hs_userbasicinfo", "ub_sex", ub.getUser_gender()).get("value"));
			}

		}
		// 自我评价
		List<HsEvaluateBO> evaluateList = evaluateDao.findByUserIdAndResId(user_id, res_id);
		HsEvaluateBO evaluateBO = null;
		if (evaluateList != null && evaluateList.size() > 0) {
			evaluateBO = evaluateList.get(0);
		}
		// 个人信息附加表
		HsSubjoinBO sub = new HsSubjoinBO();
		sub = subDao.findByUserIdAndResId(user_id, res_id);
		if (null != sub) {
			// 转换政治面貌\
			if (null != sub.getPolitical_id()) {
				sub.setPolitical_id(dicDao.getDictByParam("hs_userbasicinfo", "political_id", sub.getPolitical_id())
						.get("value"));
			} else {
				sub.setPolitical_id("");
			}
			// 转化海外工作经历
			if (null != sub.getOverseas_exp()) {
				sub.setOverseas_exp(sub.getOverseas_exp().equals("Y") ? "有" : "无");
			} else {
				sub.setOverseas_exp("无");
			}

			// 转化婚姻状态
			if (null != sub.getUb_marrystate()) {
				sub.setUb_marrystate(sub.getUb_marrystate().equals("0") ? "未婚" : "已婚");
			} else {
				sub.setUb_marrystate("");
			}
		}
		// 培训经历
		List<HsTrainingBO> trainlist = new ArrayList<HsTrainingBO>();
		trainlist = trainingDao.findByUserIdAndResId(user_id, res_id);

		// 任职经历
		List<HsUbCompanyBO> jclist = new ArrayList<HsUbCompanyBO>();
		HsUbCompanyBO comBo = new HsUbCompanyBO();
		comBo.setUser_id(user_id);
		comBo.setRes_id(res_id);
		jclist = ubComDao.getAllByParam(comBo);
		if (jclist != null && jclist.size() > 0) {
			Iterator<HsUbCompanyBO> iter1 = jclist.iterator();
			while (iter1.hasNext()) {
				HsUbCompanyBO jc = iter1.next();
				// 转换薪资范围
				if (jc.getSalary_scope() != null) {
					jc.setSalary_scope(dicDao.getDictByParam("hs_ub_company", "salary_scope", jc.getSalary_scope())
							.get("value"));
				}
				// 转换公司规模
				if (jc.getCom_size() != null) {
					jc.setCom_size(dicDao.getDictByParam("hs_ub_company", "com_size", jc.getCom_size()).get("value"));
				}
				// 转换公司种类
				if (jc.getCom_type() != null) {
					jc.setCom_type(dicDao.getDictByParam("hs_ub_company", "com_type", jc.getCom_type()).get("value"));
				}
			}
		}

		// 项目经历
		List<HsResumejobexperienceBO> jobexperiencelist = new ArrayList<HsResumejobexperienceBO>();
		jobexperiencelist = jobexpDao.findByUserIdAndResId(user_id, res_id);
		// 教育经历
		List<HsEducationBO> edulist = new ArrayList<HsEducationBO>();
		List<HsEducationExtendBO> eduExtendList = new ArrayList<HsEducationExtendBO>();
		edulist = eduDao.findByUserIdAndResId(user_id, res_id);
		HsEducationExtendBO extendBO = null;
		for (HsEducationBO educationBO : edulist) {
			extendBO = new HsEducationExtendBO();
			this.copyProperties(extendBO, educationBO);
			Map<String, String> degree = dictFieldMapService.getDictValueByParam(educationBO.getTable_name(),
					"edu_degree", educationBO.getEdu_degree());
			extendBO.setEdu_degree_value(degree.get("value"));
			eduExtendList.add(extendBO);
		}
		// 个人技能
		List<HsCustomSkillBO> cslist = new ArrayList<HsCustomSkillBO>();
		cslist = csDao.findByUserIdAndResId(user_id, res_id);

		HsCustomSkillExtendBO skillExtendBO = null;
		List<HsCustomSkillExtendBO> skillExtendList = new ArrayList<HsCustomSkillExtendBO>();
		for (HsCustomSkillBO customSkillBO : cslist) {
			skillExtendBO = new HsCustomSkillExtendBO();
			this.copyProperties(skillExtendBO, customSkillBO);
			if (StringUtils.isNotEmpty(customSkillBO.getProfessional_name())) {
				skillExtendBO.setProfessional_value(customSkillBO.getProfessional_name());
			} else {
				Map<String, String> professional = dictFieldMapService.getDictValueByParam(
						customSkillBO.getTable_name(), "professional_code", customSkillBO.getProfessional_code());
				skillExtendBO.setProfessional_value(professional.get("value"));
			}
			skillExtendBO.setLevel_value(dicDao.getDictByParam("hs_custom_skill", "level", customSkillBO.getLevel())
					.get("value"));
			skillExtendList.add(skillExtendBO);
		}

		// 期望职位
		List<HsDesiredPositionBO> desirelist = new ArrayList<HsDesiredPositionBO>();
		desirelist = desiredDao.findByUserIdAndResId(user_id, res_id);
		HsDesiredPositionBO desire = new HsDesiredPositionBO();
		if (desirelist != null && desirelist.size() > 0) {
			desire = desirelist.get(0);
		}
		// 学习路径
		HsLearnpathBO pathBo = new HsLearnpathBO();
		String id_card = "";
		if (null != SeentaoApplicationContext.getSession(ResourcesConstants.LOGIN_SESSION_KEY)) {
			id_card = ((UserSessionBean) SeentaoApplicationContext.getSession(ResourcesConstants.LOGIN_SESSION_KEY))
					.getIdentity_card();
		}

		pathBo.setIdentity_card(id_card);
		List<SupperBO> pathlist = pathDao.selectByIdentityCard(pathBo);

		// 个人证书
		List<HsCertificateBO> cerlist = new ArrayList<HsCertificateBO>();
		cerlist = cerDao.findByUserIdAndResId(user_id, res_id);
		HsCertificateExtendBO certificateExtendBO = null;
		List<HsCertificateExtendBO> certificateExtendExtendList = new ArrayList<HsCertificateExtendBO>();
		for (HsCertificateBO certificateBO : cerlist) {
			certificateExtendBO = new HsCertificateExtendBO();
			this.copyProperties(certificateExtendBO, certificateBO);
			if (StringUtils.isNotEmpty(certificateBO.getCerti_name())) {
				certificateExtendBO.setCerti_code_value(certificateBO.getCerti_name());
			} else {
				Map<String, String> certi_code_value = dictFieldMapService.getDictValueByParam(
						certificateBO.getTable_name(), "certi_code", certificateBO.getCerti_code());
				certificateExtendBO.setCerti_code_value(certi_code_value.get("value"));
			}
			certificateExtendExtendList.add(certificateExtendBO);
		}
		// 获取basePath
		HttpServletRequest request = ServletActionContext.getRequest();
		String path = request.getContextPath();
		String basePath = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort() + path
				+ "/";

		data.put("htmltitle", "简历预览");
		data.put("res", res);
		data.put("basePath", basePath);
		data.put("user", user);
		data.put("ub", ub);
		data.put("sub", sub);
		data.put("edulist", eduExtendList);
		data.put("cslist", skillExtendList);
		data.put("resume", bo);
		data.put("desire", desire);
		data.put("trainlist", trainlist);
		data.put("jclist", jclist);
		data.put("jobexperiencelist", jobexperiencelist);
		data.put("cerlist", certificateExtendExtendList);
		data.put("pathlist", pathlist);
		// 自我评价
		data.put("evaluateBO", evaluateBO);

		String templetPath = PropertiesUtil.getProperty("resumetemplet");
		String filesysPath = PropertiesUtil.getProperty(ResourcesConstants.UPLOAD_PATH);
		String savePath = createHtmlPath(filesysPath, bo.getUser_id() + "/" + PropertiesUtil.getProperty("baseinfofolder"));
		String htmlPath = context.getRealPath("/") + savePath;
		FreemakerUtil.createHTML(context, data, templetPath, htmlPath);
		return savePath;
	}

	private void copyProperties(SupperBO dest, SupperBO src) {
		try {
			PropertyUtils.copyProperties(dest, src);
		} catch (Exception e) {
			logger.error("属性值拷贝失败", e);
			throw new BusinessException(e);
		}
	}

	/**
	 * 生成HTML路径
	 * 
	 * @return
	 */
	private String createHtmlPath(String filesysPath,String savePath) {
		
		String htmlpath = filesysPath + PropertiesUtil.getProperty("resumesavefolder") + savePath;
		File file = new File(htmlpath);
		if (!file.exists()) {
			file.mkdirs();
		}
		String path = PropertiesUtil.getProperty("resumesavefolder") + savePath;
		String name = createHtmlName() + ".html";
		path += name;
		return path;
	}

	/**
	 * 生成HTML名称
	 * 
	 * @return
	 */
	private String createHtmlName() {
		String id = UUID.randomUUID().toString();
		return MD5Util.getMD5Str(id);
	}

	@Override
	public HsResumeBO getByPk(String id) {
		return resumeDao.selectByPrimaryKey(id);
	}

	@Override
	@Transactional
	public String getResumeHtmlPath(String user_id, String res_id) {
		HsResumeBO bo = resumeDao.selectByPrimaryKey(res_id);
		ServletContext context = ServletActionContext.getServletContext();
		String path = generateResumeHTML(bo, context);
		bo.setStatic_path(path);
		resumeDao.update(bo);
		return bo.getStatic_path();
	}

	/*
	 * 修改简历的name
	 * 
	 * @see
	 * seentao.xhsn.person.resume.service.IResumeService#updateResume(seentao
	 * .xhsn.bean.HsResumeBO)
	 */
	@Override
	public void updateResume(HsResumeBO resume) {
		int count = resumeDao.update(resume);
		// 修改session中的name
		if (count > 0) {
			UserSessionBean sessionBean = (UserSessionBean) SeentaoApplicationContext
					.getSession(ResourcesConstants.LOGIN_SESSION_KEY);
			sessionBean.setRes_name(resume.getName());
		}
	}

	@Override
	public String generateBaseInfo(HsResumeBO bo) {
		Map<String, Object> data = new HashMap<String, Object>();

		// 当前登录用户Id
		String user_id = bo.getUser_id();
		String res_id = bo.getId();
		// 简历基本信息
		HsResumeBO res = resumeDao.selectByPrimaryKey(res_id);
		// 通过Id取得用户信息
		HsUserBO user = new HsUserBO();
		user = userDao.selectByPrimaryKey(user_id);
		// 用户基本信息
		HsUserbasicinfoBO ub = new HsUserbasicinfoBO();
		ub = ubDao.getByUserSysId(user_id);

		if (null != ub) {
			// 用户性别转化为汉字
			if (null != ub.getUser_gender()) {
				ub.setUser_gender(dicDao.getDictByParam("hs_userbasicinfo", "ub_sex", ub.getUser_gender()).get("value"));
			}

		}
		// 个人信息附加表
		HsSubjoinBO sub = new HsSubjoinBO();
		sub = subDao.findByUserIdAndResId(user_id, res_id);
		if (null != sub) {
			// 转换政治面貌\
			if (null != sub.getPolitical_id()) {
				sub.setPolitical_id(dicDao.getDictByParam("hs_userbasicinfo", "political_id", sub.getPolitical_id())
						.get("value"));
			} else {
				sub.setPolitical_id("");
			}
			// 转换工作经验
			if (null != sub.getJob_exp_year()) {
				sub.setJob_exp_year(dicDao.getDictByParam("hs_userbasicinfo", "job_exp_year", sub.getJob_exp_year())
						.get("value"));
			} else {
				sub.setJob_exp_year("");
			}
			// 转化海外工作经历
			if (null != sub.getOverseas_exp()) {
				sub.setOverseas_exp(sub.getOverseas_exp().equals("Y") ? "有" : "无");
			} else {
				sub.setOverseas_exp("无");
			}

			// 转化婚姻状态
			if (null != sub.getUb_marrystate()) {
				sub.setUb_marrystate(sub.getUb_marrystate().equals("0") ? "未婚" : "已婚");
			} else {
				sub.setUb_marrystate("");
			}
			// 转化户口所在地
			if (null != sub.getAear_code()) {
				sub.setAear_code(ResourcesConstants.ARRAY_CITY.get(sub.getAear_code()));
			}
			// 转化现居住城市
			if (null != sub.getUb_address()) {
				sub.setUb_address(ResourcesConstants.ARRAY_CITY.get(sub.getUb_address()));
			}
		}
		// 获取basePath
		HttpServletRequest request = ServletActionContext.getRequest();
		String path = request.getContextPath();
		String basePath = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort() + path
				+ "/";
		data.put("htmltitle", "简历预览");
		data.put("res", res);
		data.put("basePath", basePath);
		data.put("user", user);
		data.put("ub", ub);
		data.put("sub", sub);

		String templetPath = PropertiesUtil.getProperty("baseinfotemp");
		String filesysPath = PropertiesUtil.getProperty(ResourcesConstants.UPLOAD_PATH);
		String savePath = createHtmlPath(filesysPath, bo.getUser_id() + "/" + PropertiesUtil.getProperty("baseinfofolder"));
		String htmlPath =filesysPath + savePath;
		FreemakerUtil.createHTML(context, data, templetPath, htmlPath);

		bo.setBaseinfo_path(savePath);
		resumeDao.update(bo);
		return savePath;
	}

	@Override
	public String generateDesire(HsResumeBO bo) {
		Map<String, Object> data = new HashMap<String, Object>();
		// 当前登录用户Id
		String user_id = bo.getUser_id();
		String res_id = bo.getId();
		// 期望职位
		List<HsDesiredPositionBO> desirelist = new ArrayList<HsDesiredPositionBO>();
		desirelist = desiredDao.findByUserIdAndResId(user_id, res_id);
		String savePath = null;
		HsDesiredPositionBO desire = new HsDesiredPositionBO();
		if (desirelist != null && desirelist.size() > 0) {
			desire = desirelist.get(0);
			if (desire.getJob_type() != null) {
				desire.setJob_type(ResourcesConstants.ARRAY_JOB.get(desire.getJob_type()));
			}
			if (desire.getDesired_city() != null) {
				String[] arrCity = desire.getDesired_city().split(",");
				String citys = "";
				for (String city : arrCity) {
					citys += "," + ResourcesConstants.ARRAY_CITY.get(city);
				}
				if (citys.startsWith(",")) {
					desire.setDesired_city(citys.substring(1));
				}
			}

			if (desire.getEmployment_type() != null) {
				String type = desire.getEmployment_type();
				if (type.equals("1")) {
					desire.setEmployment_type("全职");
				} else if (type.equals("2")) {
					desire.setEmployment_type("兼职");
				} else {
					desire.setEmployment_type("实习");
				}
			}

			// 获取basePath
			HttpServletRequest request = ServletActionContext.getRequest();
			String path = request.getContextPath();
			String basePath = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort()
					+ path + "/";
			data.put("basePath", basePath);
			data.put("desire", desire);

			String templetPath = PropertiesUtil.getProperty("desiretemp");
			String filesysPath = PropertiesUtil.getProperty(ResourcesConstants.UPLOAD_PATH);
			savePath = createHtmlPath(filesysPath, bo.getUser_id() + "/" + PropertiesUtil.getProperty("desirefolder"));
			String htmlPath = filesysPath + savePath;
			FreemakerUtil.createHTML(context, data, templetPath, htmlPath);
		}
		bo.setDesire_path(savePath);
		resumeDao.update(bo);
		return savePath;
	}

	@Override
	public String generateEvaluate(HsResumeBO bo) {
		Map<String, Object> data = new HashMap<String, Object>();
		// 当前登录用户Id
		String user_id = bo.getUser_id();
		String res_id = bo.getId();
		// 自我评价
		List<HsEvaluateBO> evaluateList = evaluateDao.findByUserIdAndResId(user_id, res_id);
		HsEvaluateBO evaluateBO = null;
		if (evaluateList != null && evaluateList.size() > 0) {
			evaluateBO = evaluateList.get(0);
		}
		// 获取basePath
		HttpServletRequest request = ServletActionContext.getRequest();
		String path = request.getContextPath();
		String basePath = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort() + path
				+ "/";
		data.put("basePath", basePath);
		data.put("evaluateBO", evaluateBO);
		String templetPath = PropertiesUtil.getProperty("evaluatetemp");
		String filesysPath = PropertiesUtil.getProperty(ResourcesConstants.UPLOAD_PATH);
		String savePath = createHtmlPath(filesysPath, bo.getUser_id() + "/" + PropertiesUtil.getProperty("evaluatefolder"));
		String htmlPath = filesysPath + savePath;
		FreemakerUtil.createHTML(context, data, templetPath, htmlPath);

		bo.setEvaluate_path(savePath);
		resumeDao.update(bo);
		return savePath;
	}

	@Override
	public String generatePractice(HsResumeBO bo) {
		Map<String, Object> data = new HashMap<String, Object>();
		// 当前登录用户Id
		String user_id = bo.getUser_id();
		String res_id = bo.getId();
		// 任职经历
		List<HsUbCompanyBO> jclist = new ArrayList<HsUbCompanyBO>();
		HsUbCompanyBO comBo = new HsUbCompanyBO();
		comBo.setUser_id(user_id);
		comBo.setRes_id(res_id);
		String savePath = null;
		jclist = ubComDao.getAllByParam(comBo);
		if (jclist != null && jclist.size() > 0) {
			Iterator<HsUbCompanyBO> iter1 = jclist.iterator();
			while (iter1.hasNext()) {
				HsUbCompanyBO jc = iter1.next();
				// 转化公司类别
				if (jc.getTrade_code() != null) {
					jc.setTrade_code(ResourcesConstants.ARRAY_TRADE.get(jc.getTrade_code()));
				}
				// 转换薪资范围
				if (jc.getSalary_scope() != null) {
					jc.setSalary_scope(dicDao.getDictByParam("hs_ub_company", "salary_scope", jc.getSalary_scope())
							.get("value"));
				}
				// 转换公司规模
				if (jc.getCom_size() != null) {
					jc.setCom_size(dicDao.getDictByParam("hs_ub_company", "com_size", jc.getCom_size()).get("value"));
				}
				// 转换公司种类
				if (jc.getCom_type() != null) {
					jc.setCom_type(dicDao.getDictByParam("hs_ub_company", "com_type", jc.getCom_type()).get("value"));
				}
			}

			// 获取basePath
			HttpServletRequest request = ServletActionContext.getRequest();
			String path = request.getContextPath();
			String basePath = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort()
					+ path + "/";
			data.put("basePath", basePath);
			data.put("jclist", jclist);
			String templetPath = PropertiesUtil.getProperty("practicetemp");
			String filesysPath = PropertiesUtil.getProperty(ResourcesConstants.UPLOAD_PATH);
			savePath = createHtmlPath(filesysPath, bo.getUser_id() + "/" + PropertiesUtil.getProperty("practicefolder"));
			String htmlPath = filesysPath + savePath;
			FreemakerUtil.createHTML(context, data, templetPath, htmlPath);
		}

		bo.setPractice_path(savePath);
		resumeDao.update(bo);
		return savePath;
	}

	@Override
	public String generateEducation(HsResumeBO bo) {
		Map<String, Object> data = new HashMap<String, Object>();
		// 当前登录用户Id
		String user_id = bo.getUser_id();
		String res_id = bo.getId();
		// 教育经历
		List<HsEducationBO> edulist = new ArrayList<HsEducationBO>();
		List<HsEducationExtendBO> eduExtendList = new ArrayList<HsEducationExtendBO>();
		edulist = eduDao.findByUserIdAndResId(user_id, res_id);
		HsEducationExtendBO extendBO = null;
		for (HsEducationBO educationBO : edulist) {
			extendBO = new HsEducationExtendBO();
			this.copyProperties(extendBO, educationBO);
			Map<String, String> degree = dictFieldMapService.getDictValueByParam(educationBO.getTable_name(),
					"edu_degree", educationBO.getEdu_degree());
			extendBO.setEdu_degree_value(degree.get("value"));
			eduExtendList.add(extendBO);
		}
		// 获取basePath
		HttpServletRequest request = ServletActionContext.getRequest();
		String path = request.getContextPath();
		String basePath = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort() + path
				+ "/";
		data.put("basePath", basePath);
		data.put("edulist", eduExtendList);
		String savePath = null;
		if (eduExtendList != null && eduExtendList.size() > 0) {
			String templetPath = PropertiesUtil.getProperty("educationtemp");
			String filesysPath = PropertiesUtil.getProperty(ResourcesConstants.UPLOAD_PATH);
			savePath = createHtmlPath(filesysPath,bo.getUser_id() + "/" + PropertiesUtil.getProperty("educationfolder"));
			String htmlPath = filesysPath + savePath;
			FreemakerUtil.createHTML(context, data, templetPath, htmlPath);
		}
		bo.setEducation_path(savePath);
		resumeDao.update(bo);
		return savePath;
	}

	@Override
	public String generateCertificate(HsResumeBO bo) {
		Map<String, Object> data = new HashMap<String, Object>();
		// 当前登录用户Id
		String user_id = bo.getUser_id();
		String res_id = bo.getId();
		// 个人证书
		List<HsCertificateBO> cerlist = new ArrayList<HsCertificateBO>();
		cerlist = cerDao.findByUserIdAndResId(user_id, res_id);
		HsCertificateExtendBO certificateExtendBO = null;
		List<HsCertificateExtendBO> certificateExtendExtendList = new ArrayList<HsCertificateExtendBO>();
		for (HsCertificateBO certificateBO : cerlist) {
			certificateExtendBO = new HsCertificateExtendBO();
			this.copyProperties(certificateExtendBO, certificateBO);
			if (StringUtils.isNotEmpty(certificateBO.getCerti_name())) {
				certificateExtendBO.setCerti_code_value(certificateBO.getCerti_name());
			} else {
				Map<String, String> certi_code_value = dictFieldMapService.getDictValueByParam(
						certificateBO.getTable_name(), "certi_code", certificateBO.getCerti_code());
				certificateExtendBO.setCerti_code_value(certi_code_value.get("value"));
			}
			certificateExtendExtendList.add(certificateExtendBO);
		}
		// 获取basePath
		HttpServletRequest request = ServletActionContext.getRequest();
		String path = request.getContextPath();
		String basePath = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort() + path
				+ "/";
		data.put("basePath", basePath);
		data.put("cerlist", certificateExtendExtendList);
		String savePath = null;
		if (certificateExtendExtendList != null && certificateExtendExtendList.size() > 0) {
			String templetPath = PropertiesUtil.getProperty("certificatetemp");
			String filesysPath = PropertiesUtil.getProperty(ResourcesConstants.UPLOAD_PATH);
			savePath = createHtmlPath(filesysPath, bo.getUser_id() + "/" + PropertiesUtil.getProperty("certificatefolder"));
			String htmlPath = filesysPath + savePath;
			FreemakerUtil.createHTML(context, data, templetPath, htmlPath);
		}

		bo.setCertificate_path(savePath);
		resumeDao.update(bo);
		return savePath;
	}

	@Override
	public String generateTrain(HsResumeBO bo) {
		Map<String, Object> data = new HashMap<String, Object>();
		// 当前登录用户Id
		String user_id = bo.getUser_id();
		String res_id = bo.getId();
		// 培训经历
		List<HsTrainingBO> trainlist = new ArrayList<HsTrainingBO>();
		trainlist = trainingDao.findByUserIdAndResId(user_id, res_id);
		// 获取basePath
		HttpServletRequest request = ServletActionContext.getRequest();
		String path = request.getContextPath();
		String basePath = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort() + path
				+ "/";
		data.put("basePath", basePath);
		data.put("trainlist", trainlist);
		String savePath = null;
		if (trainlist != null && trainlist.size() > 0) {
			String templetPath = PropertiesUtil.getProperty("traintemp");
			String filesysPath = PropertiesUtil.getProperty(ResourcesConstants.UPLOAD_PATH);
			savePath = createHtmlPath(filesysPath, bo.getUser_id() + "/" + PropertiesUtil.getProperty("trainfolder"));
			String htmlPath =filesysPath+ savePath;
			FreemakerUtil.createHTML(context, data, templetPath, htmlPath);
		}

		bo.setTrain_path(savePath);
		resumeDao.update(bo);
		return savePath;
	}

	@Override
	public String generateProject(HsResumeBO bo) {
		Map<String, Object> data = new HashMap<String, Object>();
		// 当前登录用户Id
		String user_id = bo.getUser_id();
		String res_id = bo.getId();
		// 项目经历
		List<HsResumejobexperienceBO> jobexperiencelist = new ArrayList<HsResumejobexperienceBO>();
		jobexperiencelist = jobexpDao.findByUserIdAndResId(user_id, res_id);
		// 获取basePath
		HttpServletRequest request = ServletActionContext.getRequest();
		String path = request.getContextPath();
		String basePath = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort() + path
				+ "/";
		data.put("basePath", basePath);
		data.put("jobexperiencelist", jobexperiencelist);
		String savePath = null;

		if (jobexperiencelist != null && jobexperiencelist.size() > 0) {
			String templetPath = PropertiesUtil.getProperty("projecttemp");
			String filesysPath = PropertiesUtil.getProperty(ResourcesConstants.UPLOAD_PATH);
			savePath = createHtmlPath(filesysPath, bo.getUser_id() + "/" + PropertiesUtil.getProperty("projectfolder"));
			String htmlPath = filesysPath + savePath;
			FreemakerUtil.createHTML(context, data, templetPath, htmlPath);
		}

		bo.setProject_path(savePath);
		resumeDao.update(bo);
		return savePath;
	}

	@Override
	public String generateSkill(HsResumeBO bo) {
		Map<String, Object> data = new HashMap<String, Object>();
		// 当前登录用户Id
		String user_id = bo.getUser_id();
		String res_id = bo.getId();
		// 个人技能
		List<HsCustomSkillBO> cslist = new ArrayList<HsCustomSkillBO>();
		cslist = csDao.findByUserIdAndResId(user_id, res_id);

		HsCustomSkillExtendBO skillExtendBO = null;
		List<HsCustomSkillExtendBO> skillExtendList = new ArrayList<HsCustomSkillExtendBO>();
		for (HsCustomSkillBO customSkillBO : cslist) {
			skillExtendBO = new HsCustomSkillExtendBO();
			this.copyProperties(skillExtendBO, customSkillBO);
			if (StringUtils.isNotEmpty(customSkillBO.getProfessional_name())) {
				skillExtendBO.setProfessional_value(customSkillBO.getProfessional_name());
			} else {
				Map<String, String> professional = dictFieldMapService.getDictValueByParam(
						customSkillBO.getTable_name(), "professional_code", customSkillBO.getProfessional_code());
				skillExtendBO.setProfessional_value(professional.get("value"));
			}
			skillExtendBO.setLevel_value(dicDao.getDictByParam("hs_custom_skill", "level", customSkillBO.getLevel())
					.get("value"));
			skillExtendList.add(skillExtendBO);
		}
		// 获取basePath
		HttpServletRequest request = ServletActionContext.getRequest();
		String path = request.getContextPath();
		String basePath = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort() + path
				+ "/";
		data.put("basePath", basePath);
		data.put("cslist", skillExtendList);
		String savePath = null;
		if (skillExtendList != null && skillExtendList.size() > 0) {
			String templetPath = PropertiesUtil.getProperty("skilltemp");
			String filesysPath = PropertiesUtil.getProperty(ResourcesConstants.UPLOAD_PATH);
			savePath = createHtmlPath(filesysPath, bo.getUser_id() + "/" + PropertiesUtil.getProperty("skillfolder"));
			String htmlPath = filesysPath + savePath;
			FreemakerUtil.createHTML(context, data, templetPath, htmlPath);
		}

		bo.setSkill_path(savePath);
		resumeDao.update(bo);
		return savePath;
	}

}
