package seentao.xhsn.login.service.impl;

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLDecoder;

import net.sf.json.JSONObject;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import seentao.xhsn.bean.HsEnterpriseBO;
import seentao.xhsn.bean.HsResumeBO;
import seentao.xhsn.bean.HsUserBO;
import seentao.xhsn.bean.HsUserbasicinfoBO;
import seentao.xhsn.common.DictionaryEnum;
import seentao.xhsn.enterprise.info.dao.IInfoDAO;
import seentao.xhsn.exception.BusinessException;
import seentao.xhsn.login.bean.LoginBean;
import seentao.xhsn.login.dao.ILoginDAO;
import seentao.xhsn.login.service.ILoginService;
import seentao.xhsn.login.util.PassWordUtil;
import seentao.xhsn.person.info.dao.IUBInfoDao;
import seentao.xhsn.person.resume.dao.IResumeDAO;
import seentao.xhsn.person.resume.service.IResumeService;
import seentao.xhsn.regist.dao.IRegistDao;
import seentao.xhsn.tools.PropertiesUtil;

@Service
@Transactional
public class LoginServiceImpl implements ILoginService {
	private static Logger logger=Logger.getLogger(LoginServiceImpl.class);
	@Autowired
	private ILoginDAO dao;
	@Autowired
	private IRegistDao registDao;
	@Autowired
	private IUBInfoDao ubinfoDao;
	@Autowired
	private IResumeDAO resumeDao;
	@Autowired
	private IInfoDAO infoDAO;

	@Override
	public HsUserBO getUserBeanByLoginInfo(String user_mail, String userPwd, String type) {
		HsUserBO result = dao.getUserBeanByLoginInfo(user_mail, userPwd, type);
		if (result != null && result.getId() != null && result.getId().trim().length() > 0) {
			HsEnterpriseBO ent = infoDAO.getBySysUserId(result.getId());
			if (ent != null && ent.getId() != null && ent.getId().trim().length() > 0) {
				result.setUser_id(ent.getId());
				result.setPhoto_url(ent.getLogo_path());
			}
		}
		return result;
	}

	@Override
	@Transactional(rollbackFor = { RuntimeException.class, Exception.class })
	public void updateLoginInfo(HsUserBO hsUserBO) {
		dao.updateLoginInfo(hsUserBO);
	}

	@Autowired
	private IResumeService resService;

	@Override
	public HsUserBO login_user(LoginBean person) {
//		long nowdate = System.currentTimeMillis();
//		long begin = System.currentTimeMillis();
		// System.out.println("begin===========" + nowdate);
		HsUserBO bo = null;
		/*
		 * // 1：将登录信息转换成json JSONObject paramBean = new JSONObject();
		 * paramBean.put("user_passport", person.getUser_name());
		 * paramBean.put("user_pwd",
		 * PassWordUtil.createPassword(person.getUser_pwd()));
		 */
		String json_result = this.selectLoginBean(person);
//		System.out.println(json_result);
		JSONObject result_obj = JSONObject.fromObject(json_result);
		JSONObject result_bo = result_obj.getJSONObject("bo");
		Object resultBO = JSONObject.toBean(result_bo);
		// System.out.println("0000===========" + (System.currentTimeMillis() -
		// nowdate));
//		nowdate = System.currentTimeMillis();
		// 2: 读取接口路径，并将参数加入进去
		if (resultBO != null) {
			String identitycard = result_bo.getString("user_idnum");
			String user_email = result_bo.getString("user_email");
			// bo = registDao.getUserByIdentityCard(identitycard);
			bo = registDao.getUserByEamil(user_email, person.getType());
			// System.out.println("1111===========" +
			// (System.currentTimeMillis() - nowdate));
//			nowdate = System.currentTimeMillis();
			if (bo == null || bo.getId().trim().length() <= 0) {
				bo = new HsUserBO();
			}
			String user_name = "";
			try {
				user_name = URLDecoder.decode(result_bo.getString("user_name"), "UTF-8");
			} catch (Exception e) {
				logger.error("编码转换错误", e);
				throw new BusinessException(e, "编码转换错误");
			}
			bo.setIdentity_card(identitycard);
			bo.setUser_email(result_bo.getString("user_email"));
			bo.setUser_name(user_name);
			bo.setUser_phone(result_bo.getString("user_phone"));
			bo.setUser_type(Integer.parseInt(DictionaryEnum.PERSON_TYPE.getStringValue()));
			bo.setUser_isopen((Integer) result_bo.get("user_isopen"));
			if (bo.getId() != null && bo.getId().trim().length() > 0) {
				registDao.update(bo);
			} else {
				registDao.insert(bo);
			}
			// System.out.println("2222===========" +
			// (System.currentTimeMillis() - nowdate));
//			nowdate = System.currentTimeMillis();
			// 4: 验证用户是否存在数据库，如果存在，就更新，如果不存在就添加
			HsUserbasicinfoBO userinfoBO = ubinfoDao.getByUserSysId(bo.getId());
			if (userinfoBO == null || userinfoBO.getId().trim().length() <= 0) {
				userinfoBO = new HsUserbasicinfoBO();
				userinfoBO.setSys_user_id(bo.getId());
			}
			userinfoBO.setUser_name(user_name);
			userinfoBO.setUser_gender(result_bo.getString("user_gender"));
			userinfoBO.setUser_phone(result_bo.getString("user_phone"));
			userinfoBO.setUser_email(result_bo.getString("user_email"));
			userinfoBO.setUser_idnum(identitycard);
			userinfoBO.setMajor_code(result_bo.getString("major_code"));
			try {
				userinfoBO.setMajor_name(URLDecoder.decode(result_bo.getString("major_name"), "UTF-8"));
				userinfoBO.setSchool_name(URLDecoder.decode(result_bo.getString("school_name"), "UTF-8"));
				userinfoBO.setUser_degree(URLDecoder.decode(result_bo.getString("user_degree"), "UTF-8"));
				String user_photo = URLDecoder.decode(result_bo.getString("user_photo"), "UTF-8");
				if (StringUtils.isNotEmpty(user_photo))
					userinfoBO.setUser_photo(PropertiesUtil.getProperty("filesys_project_url") + user_photo);
				else
					userinfoBO.setUser_photo("");
			} catch (Exception e) {
				logger.error("编码转换错误", e);
				throw new BusinessException(e, "编码转换错误");
			}
			userinfoBO.setSchool_code(result_bo.getString("school_code"));
			userinfoBO.setUser_code(result_bo.getString("user_code"));
			userinfoBO.setUser_loginnum((Integer) result_bo.get("user_loginnum"));
			userinfoBO.setUser_passport(result_bo.getString("user_passport"));
			userinfoBO.setUser_type((Integer) result_bo.get("user_type"));

			if (userinfoBO.getId() != null && userinfoBO.getId().trim().length() > 0) {
				ubinfoDao.update(userinfoBO);
			} else {
				ubinfoDao.inster(userinfoBO);
			}
			// System.out.println("3333===========" +
			// (System.currentTimeMillis() - nowdate));
//			nowdate = System.currentTimeMillis();
			// 根据用户id获取简历信息，如果简历不存在，就初始化一条
			HsResumeBO resumeBO = resumeDao.getByUserId(bo.getId());
			if (resumeBO == null || resumeBO.getId().trim().length() <= 0) {
				resumeBO = new HsResumeBO();
				resumeBO.setUser_id(bo.getId());
				resumeBO.setName(userinfoBO.getUser_name() + "简历");
				String res_id = resumeDao.insert(resumeBO);
				resumeBO.setId(res_id);
				resService.generateBaseInfo(resumeBO);
			}
			// System.out.println("4444===========" +
			// (System.currentTimeMillis() - nowdate));
//			nowdate = System.currentTimeMillis();
			/*
			 * // 5 初始化左侧菜单 HsPersonLeftMenuBO param = new HsPersonLeftMenuBO();
			 * param.setUser_id(bo.getId()); param.setRes_id(resumeBO.getId());
			 * List<HsPersonLeftMenuBO> leftMenus =
			 * leftMenuDao.findLeftMenuAndDataByParam(param); if (leftMenus !=
			 * null && leftMenus.size() == 11) { } else { //
			 * leftMenuDao.deleteByParam(bo.getId(), resumeBO.getId());
			 * leftMenuDao.insterInstence(bo.getId(), resumeBO.getId()); }
			 */
			bo.setUser_id(userinfoBO.getId());
			bo.setRes_id(resumeBO.getId());
			bo.setRes_name(resumeBO.getName());
			bo.setPhoto_url(userinfoBO.getUser_photo());
			// System.out.println("5555===========" +
			// (System.currentTimeMillis() - nowdate));
//			nowdate = System.currentTimeMillis();
		}
		// System.out.println("end===========" + (nowdate - begin));
		return bo;
	}

	@Override
	public String selectLoginBean(LoginBean person) {
		StringBuilder sb = new StringBuilder();

		String spec = PropertiesUtil.getProperty("login_project_url")
				+ PropertiesUtil.getProperty("login_validate_url");
		try {
			URL url = new URL(spec);
			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
			conn.setDoOutput(true);
			conn.setDoInput(true);
			conn.setRequestMethod("POST"); // 设置提交方式为post
			conn.setConnectTimeout(10000);
			conn.setUseCaches(false);
			conn.connect();
			BufferedOutputStream out = new BufferedOutputStream(conn.getOutputStream());
			String r = "user_passport=" + person.getUser_mail() + "&user_pwd="
					+ PassWordUtil.createPassword(person.getUser_pwd());
			out.write(r.getBytes());
			out.close();
			out.flush();
			InputStream is = conn.getInputStream();
			BufferedReader reader = new BufferedReader(new InputStreamReader(is));
			String line = null;
			while ((line = reader.readLine()) != null) {
				sb.append(line);
			}
			reader.close();
		} catch (IOException e) {
			logger.error("登录验证接口有问题，",e);
			e.printStackTrace();
		}
		// 3: 读取返回值，如果登录成功，将返回信息包装成user
		String json_result = sb.toString();
		return json_result;
	}

}
