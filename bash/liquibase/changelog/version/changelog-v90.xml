<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext"
	xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd
        http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd">
	<changeSet id="1" author="simpletiny">
		<sql>
            <![CDATA[
            		ALTER TABLE deposit_ticket_paid 
						ADD COLUMN type VARCHAR(10) NULL COMMENT '支付类型' AFTER money;
             ]]>
			<comment>ALTER TABLE deposit_ticket_paid</comment>
		</sql>
	</changeSet>
	<changeSet id="2" author="simpletiny">
		<sql>
            <![CDATA[
            		CREATE VIEW view_discount_receivable AS
						SELECT 
						    A.team_number AS team_number,
						    A.create_user AS user_number,
						    D.final_type,
						    A.confirm_date AS confirm_date,
							IF(B.final_flg='Y',B.final_receivable,B.budget_receivable) as receivable,
						    C.status,
						    SUM(C.received) AS discount_received,
						    IF(B.final_flg='Y',B.final_balance,B.budget_balance) as balance,
						    DATE_FORMAT(FROM_UNIXTIME( B.update_time/1000),'%Y-%m-%d') AS update_time
						FROM
						    budget_order_view A
						        LEFT JOIN
						    final_order_view D ON A.team_number = D.team_number
						        LEFT JOIN
						    receivable B ON A.team_number = B.team_number
						        LEFT JOIN
						    client_received_detail C ON A.team_number = C.team_number
						        AND LEFT(C.received_time, 10) <= (A.confirm_date + INTERVAL 1 DAY)
						        AND C.status = 'E'
						        AND C.type != 'TAIL98'
						WHERE
						    C.team_number IS NOT NULL AND (D.final_type is null OR D.final_type!=4)
						GROUP BY A.team_number
						HAVING balance=0 AND discount_received>=receivable*0.98 and receivable >=discount_received;
             ]]>
			<comment>CREATE VIEW view_discount_receivable</comment>
		</sql>
	</changeSet>
	<changeSet id="3" author="simpletiny">
		<sql>
            <![CDATA[
            		ALTER TABLE air_ticket_need 
						CHANGE COLUMN product_name product_name VARCHAR(20) NOT NULL ;
             ]]>
			<comment>ALTER TABLE air_ticket_need </comment>
		</sql>
	</changeSet>
	<changeSet id="4" author="simpletiny">
		<sql>
            <![CDATA[
            		ALTER TABLE supplier_paid_detail
					ADD COLUMN payable_pk CHAR(22) NULL COMMENT '关联的应付款pk' AFTER paid_user;
             ]]>
			<comment>ALTER TABLE supplier_paid_detail</comment>
		</sql>
	</changeSet>
	<changeSet id="5" author="simpletiny">
		<sql>
            <![CDATA[
            		ALTER TABLE budget_non_standard_order 
					CHANGE COLUMN independent_flg independent_flg CHAR(1) NULL DEFAULT 'N' COMMENT '是否为独立团，Y独立团，N非独立，A单机票';
             ]]>
			<comment>ALTER TABLE budget_non_standard_order</comment>
		</sql>
	</changeSet>
	<changeSet id="6" author="simpletiny">
		<sql>
            <![CDATA[
            		CREATE TABLE sale_order_ticket_info (
					  create_user VARCHAR(10) NULL DEFAULT NULL,
					  update_user VARCHAR(10) NULL DEFAULT NULL,
					  create_time VARCHAR(15) NULL DEFAULT NULL,
					  update_time VARCHAR(15) NULL DEFAULT NULL,
					  pk CHAR(22) NOT NULL,
					  team_number VARCHAR(10) NULL,
					  ticket_index TINYINT NULL,
					  ticket_date VARCHAR(10) NULL,
					  from_city VARCHAR(10) NULL,
					  to_city VARCHAR(10) NULL,
					  order_pk CHAR(22) NULL,
					  comment VARCHAR(200) NULL COMMENT '票务需求，有多条记录的数据，只存储于ticket_index为1的行',
					  PRIMARY KEY (pk))
					ENGINE = InnoDB
					DEFAULT CHARACTER SET = utf8
					COLLATE = utf8_bin
					COMMENT = '订单机票信息（目前用于单机票）';
             ]]>
			<comment>CREATE TABLE sale_order_ticket_info</comment>
		</sql>
	</changeSet>
	<changeSet id="7" author="simpletiny">
		<sql>
            <![CDATA[
            	DROP VIEW IF EXISTS view_order_count;
				CREATE VIEW view_order_count AS
				    SELECT 
				        A.client_employee_pk AS client_employee_pk,
				        COUNT(A.pk) AS order_count,
				        COUNT(IF(A.departure_date >= DATE_FORMAT(DATE_ADD(NOW(), INTERVAL - 20 DAY),
				                    '%Y-%m-%d'),
				            1,
				            NULL)) AS day21_count,
				        MAX(A.departure_date) AS last_confirm_date,
				        MIN(if(A.departure_date is null or A.departure_date = '','2099-01-01',A.departure_date)) AS first_confirm_date
				    FROM
				        budget_order_view A
				            LEFT JOIN
				        client_employee B ON A.client_employee_pk = B.pk
				        where B.pk is not null
				    GROUP BY A.client_employee_pk;
             ]]>
			<comment>ALTER VIEW view_order_count</comment>
		</sql>
	</changeSet>
	<changeSet id="8" author="simpletiny">
		<sql>
            <![CDATA[
            	ALTER TABLE supplier_paid_detail 
				ADD COLUMN voucher_file VARCHAR(30) NULL COMMENT '当类型为back即收入时的收入凭证文件' AFTER payable_pk,
				ADD COLUMN voucher_number VARCHAR(20) NULL DEFAULT NULL COMMENT '当类型为back即收入时的收入匹配之后与银行流水之间的凭证号' AFTER voucher_file;
             ]]>
			<comment>ALTER TABLE supplier_paid_detail</comment>
		</sql>
	</changeSet>
	<changeSet id="9" author="simpletiny">
		<sql>
            <![CDATA[
            	DROP VIEW if exists paid_detail;
          		CREATE VIEW paid_detail AS 
				SELECT * FROM supplier_paid_detail WHERE type like '%STRIKE%'
				union all
				SELECT * FROM supplier_paid_detail WHERE type not like '%STRIKE%' 
				GROUP BY related_pk
             ]]>
			<comment> ALTER VIEW paid_detail</comment>
		</sql>
	</changeSet>
	<changeSet id="10" author="simpletiny">
		<sql>
            <![CDATA[
            	ALTER TABLE air_ticket_paid_detail 
					ADD COLUMN card_account VARCHAR(50) NULL COMMENT '当type是BACK即收入时， 所记录的收入账户' AFTER receiver,
					ADD COLUMN voucher_file VARCHAR(30) NULL COMMENT '当为退返时的收入凭证' AFTER card_account;
             ]]>
			<comment>ALTER TABLE air_ticket_paid_detail </comment>
		</sql>
	</changeSet>
	<changeSet id="11" author="simpletiny">
		<sql>
            <![CDATA[
            	DROP VIEW if exists view_air_ticket_paid_detail;
          		CREATE VIEW view_air_ticket_paid_detail AS 
				SELECT * FROM air_ticket_paid_detail WHERE type LIKE '%STRIKE%'
				union all
				SELECT * FROM air_ticket_paid_detail WHERE type NOT LIKE '%STRIKE%' 
				GROUP BY related_pk
             ]]>
			<comment>ALTER VIEW view_air_ticket_paid_detail</comment>
		</sql>
	</changeSet>
	<changeSet id="12" author="simpletiny">
		<sql>
            <![CDATA[
            	CREATE VIEW view_all_need_match_received AS
				    SELECT 
				        IF(A.type = 'SUM',
				            A.sum_received,
				            A.received) AS received,
				        A.type AS type,
				        A.received_time,
				        A.card_account,
				        A.related_pk,
				        A.create_user AS apply_user,
				        DATE_FORMAT(FROM_UNIXTIME(A.create_time / 1000),
				                '%Y-%m-%d') AS apply_date,
				        B.name AS pay_user,
				        A.client_employee_pk AS pay_user_pk,
				        'C' AS from_where
				    FROM
				        received_detail A
				            LEFT JOIN
				        client_employee B ON A.client_employee_pk = B.pk
				    WHERE
				        A.type IN ('SUM' , 'RECEIVED')
				            AND A.status = 'I' 
				    UNION ALL SELECT 
				        A.allot_money AS received,
				        'BACK' AS type,
				        A.time AS received_time,
				        A.card_account,
				        A.related_pk,
				        A.create_user AS apply_user,
				        DATE_FORMAT(FROM_UNIXTIME(A.create_time / 1000),
				                '%Y-%m-%d') AS apply_date,
				        B.name AS pay_user,
				        A.supplier_employee_pk AS pay_user_pk,
				        'D' AS from_where
				    FROM
				        paid_detail A
				            LEFT JOIN
				        supplier_employee B ON A.supplier_employee_pk = B.pk
				    WHERE
				        A.type = 'BACK' AND A.status = 'I' 
				    UNION ALL SELECT 
				        A.allot_money AS received,
				        A.type AS type,
				        A.time AS received_time,
				        A.card_account,
				        A.related_pk,
				        A.create_user AS apply_user,
				        DATE_FORMAT(FROM_UNIXTIME(A.create_time / 1000),
				                '%Y-%m-%d') AS apply_date,
				        B.name AS pay_user,
				        A.supplier_employee_pk AS pay_user_pk,
				        'A' AS from_where
				    FROM
				        view_air_ticket_paid_detail A
				            LEFT JOIN
				        supplier_employee B ON A.supplier_employee_pk = B.pk
				    WHERE
				        A.type in('BACK','RECEIVE') AND A.status = 'I';
             ]]>
			<comment>CREATE VIEW view_all_need_match_received </comment>
		</sql>
	</changeSet>
	<changeSet id="13" author="simpletiny">
		<sql>
            <![CDATA[
            	ALTER TABLE received_match 
					ADD COLUMN from_where CHAR(1) NULL COMMENT '收入来源，A，票务退返，C，客户收入，D，地接退返' AFTER create_time;
             ]]>
			<comment>ALTER TABLE received_match</comment>
		</sql>
	</changeSet>
	<changeSet id="14" author="simpletiny">
		<sql>
            <![CDATA[
            	DROP VIEW if exists view_all_need_match_received;
				CREATE VIEW view_all_need_match_received AS
				SELECT 
				    IF(A.type = 'SUM',
				        A.sum_received,
				        A.received) AS received,
				    A.type AS type,
				    A.received_time,
				    A.card_account,
				    A.related_pk,
				    A.create_user AS apply_user,
				    DATE_FORMAT(FROM_UNIXTIME(A.create_time / 1000),
				            '%Y-%m-%d') AS apply_date,
				    B.name AS pay_user,
				    A.client_employee_pk AS pay_user_pk,
				    'C' AS from_where,
				   A.voucher_file As voucher_file
				FROM
				    received_detail A
				        LEFT JOIN
				    client_employee B ON A.client_employee_pk = B.pk
				WHERE
				    A.type IN ('SUM' , 'RECEIVED')
				        AND A.status = 'I' 
				UNION ALL SELECT 
				    A.allot_money AS received,
				    'BACK' AS type,
				    A.time AS received_time,
				    A.card_account,
				    A.related_pk,
				    A.create_user AS apply_user,
				    DATE_FORMAT(FROM_UNIXTIME(A.create_time / 1000),
				            '%Y-%m-%d') AS apply_date,
				    B.name AS pay_user,
				    A.supplier_employee_pk AS pay_user_pk,
				    'D' AS from_where,
				    A.voucher_file As voucher_file
				FROM
				    paid_detail A
				        LEFT JOIN
				    supplier_employee B ON A.supplier_employee_pk = B.pk
				WHERE
				    A.type = 'BACK' AND A.status = 'I' 
				UNION ALL SELECT 
				    A.allot_money AS received,
				    A.type AS type,
				    A.time AS received_time,
				    A.card_account,
				    A.related_pk,
				    A.create_user AS apply_user,
				    DATE_FORMAT(FROM_UNIXTIME(A.create_time / 1000),
				            '%Y-%m-%d') AS apply_date,
				    B.name AS pay_user,
				    A.supplier_employee_pk AS pay_user_pk,
				    'A' AS from_where,
				    A.voucher_file AS voucher_file
				FROM
				    view_air_ticket_paid_detail A
				        LEFT JOIN
				    supplier_employee B ON A.supplier_employee_pk = B.pk
				WHERE
				    A.type IN ('BACK' , 'RECEIVE')
				        AND A.status = 'I';
             ]]>
			<comment>ALTER TABLE received_match</comment>
		</sql>
	</changeSet>
	<changeSet id="15" author="simpletiny">
		<sql>
            <![CDATA[
            	ALTER TABLE team_report 
				CHANGE COLUMN pk pk CHAR(22) NOT NULL ;
             ]]>
			<comment>ALTER TABLE team_report </comment>
		</sql>
	</changeSet>
	<changeSet id="16" author="simpletiny">
		<sql>
            <![CDATA[
            	DROP VIEW if exists paid_detail;
				CREATE VIEW paid_detail AS
				    SELECT 
				        *,
				        team_number AS order_number,
				        'SINGLE' AS isOne
				    FROM
				        supplier_paid_detail
				    WHERE
				        type LIKE '%STRIKE%' 
				    UNION ALL SELECT 
				        *,
				        GROUP_CONCAT(team_number) AS order_number,
				        IF(COUNT(pk) > 1, 'SUM', 'SINGLE') AS isOne
				    FROM
				        supplier_paid_detail
				    WHERE
				        type NOT LIKE '%STRIKE%'
				    GROUP BY related_pk
             ]]>
			<comment>ALTER VIEW paid_detail </comment>
		</sql>
	</changeSet>
	<changeSet id="17" author="simpletiny">
		<sql>
            <![CDATA[
            	ALTER TABLE user_info 
					ADD COLUMN credit_limit DECIMAL(12,2) NULL DEFAULT '0.00' COMMENT '信用额度总额' AFTER user_role,
					ADD COLUMN credit_balance DECIMAL(12,2) NULL DEFAULT 0 COMMENT '可用信用额度' AFTER credit_limit;
             ]]>
			<comment>ALTER TABLE user_info </comment>
		</sql>
	</changeSet>
	<changeSet id="18" author="simpletiny">
		<sql>
            <![CDATA[
            	INSERT INTO base_data (name, type, order_index, level, ext1, delete_flg, can_edit, pk, update_user) VALUES ('销售信用额度', 'SCREDIT', '1', '1', 'N', 'N', 'Y', 'pk_scredit', 'N00000');
             ]]>
			<comment>INSERT INTO base_data</comment>
		</sql>
	</changeSet>
	<changeSet id="19" author="simpletiny">
		<sql>
            <![CDATA[
            	ALTER TABLE budget_non_standard_order 
					ADD COLUMN receivable_first_flg CHAR(1) NULL DEFAULT 'N' COMMENT '先生成团款标识' AFTER passenger_captain;
             ]]>
			<comment>ALTER TABLE budget_non_standard_order </comment>
		</sql>
	</changeSet>
	<changeSet id="20" author="simpletiny">
		<sql>
            <![CDATA[
            	ALTER TABLE budget_standard_order 
					ADD COLUMN receivable_first_flg CHAR(1) NULL DEFAULT 'N' COMMENT '先生成团款标识' AFTER name_confirm_status;

             ]]>
			<comment>ALTER TABLE budget_standard_order </comment>
		</sql>
	</changeSet>
	<changeSet id="21" author="simpletiny">
		<sql>
            <![CDATA[
            	DROP VIEW IF EXISTS budget_order_view;
				CREATE VIEW budget_order_view AS
					select  A.team_number, 
					    	A.product_name,
							'' as product_pk,
					    	A.client_employee_pk, 
					    	C.name AS client_employee_name,
					    	A.independent_flg, 
					    	A.comment, 
					    	A.other_cost_comment, 
					    	A.other_cost, 
					    	A.fy, 
					    	A.special_cost, 
					    	A.special_count, 
					    	A.adult_cost, 
					    	A.adult_count, 
					    	A.receivable, 
					    	A.days, 
					    	A.departure_date, 
					    	A.pk, 
					    	A.update_user,
					    	A.create_user AS create_user_number,
					    	B.user_name AS create_user,
					    	A.confirm_flg, 
					    	A.create_time,
					    	A.update_time,
					    	A.confirm_date,
					    	A.confirm_file,
					    	'N' AS standard_flg,
					    	A.product_manager AS product_manager_number,
					    	D.user_name AS product_manager,
					    	A.air_ticket_cost,
					    	A.product_cost,
					    	A.operate_flg,
					    	A.name_list,
                            A.lock_flg,
                            A.name_confirm_status,
                            A.passenger_captain,
                            '' AS receivable_comment,
                            '' AS treat_comment,
                            '' AS client_name,
                            '' AS ticket_number,
                            '' AS start_city,
                            '' AS start_airport,
                            '' AS end_city,
                            '' AS end_airport,
                            '' AS off_time,
                            '' AS land_time,
                            '' AS next_day,
                            case when
							A.departure_date>now() then 'no'
							when now()>=A.departure_date and
							DATE_ADD(A.departure_date,interval A.days-1 day) >
							now()
							then 'yes'
							when now()>=DATE_ADD(A.departure_date,interval A.days-1 day) then 'back'
							end
							AS status,
							0 AS product_value,
							A.receivable_first_flg
					from budget_non_standard_order A LEFT JOIN user_base B ON A.create_user = B.user_number
					LEFT JOIN client_employee C ON A.client_employee_pk = C.pk
					LEFT JOIN user_base D ON A.product_manager = D.user_number
					union all 
					select  A.team_number, 
					    	C.name AS product_name,
							A.product_pk,
					    	A.client_employee_pk,
					    	D.name AS client_employee_name,
					    	A.independent_flg, 
					    	A.comment, 
					    	A.other_cost_comment, 
					    	A.other_cost, 
					    	A.fy, 
					    	A.special_cost, 
					    	A.special_count, 
					    	A.adult_cost, 
					    	A.adult_count, 
					    	A.receivable, 
					    	A.days, 
					    	A.departure_date, 
					    	A.pk, 
					    	A.update_user, 
					    	A.create_user AS create_user_number, 
					    	B.user_name AS create_user,
					    	A.confirm_flg, 
					    	A.create_time,
					    	A.update_time,
					    	A.confirm_date,
					    	A.confirm_file,
					    	'Y' AS standard_flg,
					    	C.product_manager AS product_manager_number,
					    	E.user_name AS product_manager,
					    	A.air_ticket_cost,
					    	A.product_cost,
					    	A.operate_flg,
					    	A.name_list,
                            A.lock_flg,
                            A.name_confirm_status,
                            A.passenger_captain,
                            A.receivable_comment,
                            A.treat_comment,
                            F.client_short_name AS client_name,
                            A.ticket_number,
                            A.start_city,
                            A.start_airport,
                            A.end_city,
                            A.end_airport,
                            A.off_time,
                            A.land_time,
                            A.next_day,
                            case when
							A.departure_date>now() then 'no'
							when now()>=A.departure_date and
							DATE_ADD(A.departure_date,interval A.days-1 day) >
							now()
							then 'yes'
							when now()>=DATE_ADD(A.departure_date,interval A.days-1 day) then 'back'
							end
							AS status,
							A.product_value,
							A.receivable_first_flg
					from budget_standard_order A LEFT JOIN user_base B ON A.create_user = B.user_number
					LEFT JOIN product C ON A.product_pk = C.pk
					LEFT JOIN client_employee D ON A.client_employee_pk = D.pk
       				LEFT JOIN user_base E ON C.product_manager = E.user_number
       				LEFT JOIN client F ON D.financial_body_pk = F.pk;

             ]]>
			<comment>ALTER VIEW budget_order_view </comment>
		</sql>
	</changeSet>
	<changeSet id="22" author="simpletiny">
		<sql>
            <![CDATA[
            	CREATE TABLE product_profit (
					  departure_month VARCHAR(7) NOT NULL COMMENT '出团月',
					  status CHAR(1) NOT NULL COMMENT '状态，N待审核,Y待终审,P已完结\n',
					  people_count INT NULL DEFAULT 0 COMMENT '实发人数',
					  gross_profit DECIMAL(12,2) NULL COMMENT '毛利润',
					  product_cost DECIMAL(12,2) NULL COMMENT '产品费用',
					  keep_cost DECIMAL(12,2) NULL COMMENT '唯品费',
					  air_lose DECIMAL(12,2) NULL COMMENT '机票损失',
					  other_cost DECIMAL(12,2) NULL COMMENT '其他费用',
					  profit DECIMAL(12,2) NULL COMMENT '产品利润',
					  user_number VARCHAR(10) NULL COMMENT '产品经理用户number',
					  pk CHAR(22) NOT NULL,
					  create_user VARCHAR(10) NULL DEFAULT NULL,
					  update_user VARCHAR(10) NULL DEFAULT NULL,
					  update_time VARCHAR(15) NULL DEFAULT NULL,
					  create_time VARCHAR(15) NULL DEFAULT NULL,
					  PRIMARY KEY (pk))
					ENGINE = InnoDB
					DEFAULT CHARACTER SET = utf8
					COLLATE = utf8_bin
					COMMENT = '产品利润表';
             ]]>
			<comment>CREATE TABLE product_profit</comment>
		</sql>
	</changeSet>
	<changeSet id="23" author="simpletiny">
		<sql>
            <![CDATA[
            	DROP VIEW IF EXISTS view_product_area;
            	CREATE VIEW view_product_area AS
			    SELECT 
			        COUNT(IF(A.confirm_flg != 'N'
			                AND (B.final_type IS NULL
			                OR B.final_type != 4),
			            A.pk,
			            NULL)) AS order_cnt,
			        SUM(IF(A.confirm_flg != 'N'
			                AND (B.final_type IS NULL
			                OR B.final_type != 4),
			            (IFNULL(A.adult_count, 0) + IFNULL(A.special_count, 0)) * A.product_value,
			            0)) AS score,
			        SUM(IF(A.confirm_flg != 'N'
			                AND (B.final_type IS NULL
			                OR B.final_type != 4),
			            (IFNULL(A.adult_count, 0) + IFNULL(A.special_count, 0)),
			            0)) AS sum_people,
			        LEFT(A.departure_date, 7) AS departure_month,
			        A.product_manager_number AS product_manager_number,
			        C.user_name AS product_manager_name,
			        E.client_area AS area
			    FROM
			        budget_order_view A
			            LEFT JOIN
			        final_order_view B ON A.team_number = B.team_number
			            LEFT JOIN
			        user_base C ON A.product_manager_number = C.user_number
			            LEFT JOIN
			        client_employee D ON A.client_employee_pk = D.pk
			            LEFT JOIN
			        client E ON D.financial_body_pk = E.pk
			    GROUP BY A.product_manager_number , E.client_area , LEFT(A.departure_date, 7)
			    HAVING departure_month IS NOT NULL
			        AND area IS NOT NULL;
             ]]>
			<comment>ALTER view view_product_area</comment>
		</sql>
	</changeSet>
	<changeSet id="24" author="simpletiny">
		<sql>
            <![CDATA[
            	 DROP VIEW IF EXISTS view_product_product;
            	 CREATE view view_product_product AS
				 SELECT 
				        COUNT(IF(A.confirm_flg != 'N'
				                AND (B.final_type IS NULL
				                OR B.final_type != 4),
				            A.pk,
				            NULL)) AS order_cnt,
				        SUM(IF(A.confirm_flg != 'N'
				                AND (B.final_type IS NULL
				                OR B.final_type != 4),
				            (IFNULL(A.adult_count, 0) + IFNULL(A.special_count, 0)) * A.product_value,
				            0)) AS score,
				        SUM(IF(A.confirm_flg != 'N'
				                AND (B.final_type IS NULL
				                OR B.final_type != 4),
				            (IFNULL(A.adult_count, 0) + IFNULL(A.special_count, 0)),
				            0)) AS sum_people,
				        LEFT(A.departure_date, 7) AS departure_month,
				        A.product_pk AS product_pk,
				        C.name AS product_name,
				        C.product_manager AS product_manager_number,
				        D.user_name AS product_manager_name
				    FROM
				        budget_standard_order A
				            LEFT JOIN
				        final_standard_order B ON A.team_number = B.team_number
				            LEFT JOIN
				        product C ON A.product_pk = C.pk
				            LEFT JOIN
				        user_base D ON C.product_manager = D.user_number
				    GROUP BY C.product_manager , C.pk , LEFT(A.departure_date, 7)
				    HAVING product_manager_number is not null;
             ]]>
			<comment>ALTER view view_product_product</comment>
		</sql>
	</changeSet>
	<changeSet id="25" author="simpletiny">
		<sql>
            <![CDATA[
            	DROP VIEW IF EXISTS view_product_sale;
            	 CREATE view view_product_sale AS
				    SELECT 
				        COUNT(IF(A.confirm_flg != 'N'
				                AND (B.final_type IS NULL
				                OR B.final_type != 4),
				            A.pk,
				            NULL)) AS order_cnt,
				        SUM(IF(A.confirm_flg != 'N'
				                AND (B.final_type IS NULL
				                OR B.final_type != 4),
				            (IFNULL(A.adult_count, 0) + IFNULL(A.special_count, 0)) * A.product_value,
				            0)) AS score,
				        SUM(IF(A.confirm_flg != 'N'
				                AND (B.final_type IS NULL
				                OR B.final_type != 4),
				            (IFNULL(A.adult_count, 0) + IFNULL(A.special_count, 0)),
				            0)) AS sum_people,
				        LEFT(A.departure_date, 7) AS departure_month,
				        A.create_user_number AS sale_number,
				        C.user_name AS sale_name,
				        A.product_manager_number AS product_manager_number,
				        D.user_name AS product_manager_name
				    FROM
				        budget_order_view A
				            LEFT JOIN
				        final_order_view B ON A.team_number = B.team_number
				            LEFT JOIN
				        user_base C ON A.create_user_number = C.user_number
							LEFT JOIN
						user_base D ON A.product_manager_number = D.user_number
				    GROUP BY A.product_manager_number, A.create_user , LEFT(A.departure_date, 7);
             ]]>
			<comment>ALTER view view_product_sale</comment>
		</sql>
	</changeSet>
	<changeSet id="26" author="simpletiny">
		<sql>
            <![CDATA[
            	CREATE VIEW view_product_profit_a AS
			    SELECT 
			        LEFT(A.departure_date, 7) AS departure_month,
			        GROUP_CONCAT(DISTINCT X.approved
			            SEPARATOR ',') AS status,
			        SUM(IF(A.confirm_flg != 'N'
			                AND (D.final_type IS NULL
			                OR D.final_type != 4),
			            (IFNULL(A.adult_count, 0) + IFNULL(A.special_count, 0)),
			            0)) AS people_count,
			        A.product_manager_number,
			        SUM(IF(X.discount_flg = 'Y',
			            X.discount_receivable,
			            IF(B.final_flg = 'Y',
			                B.final_receivable,
			                B.budget_receivable)) - IF(ISNULL(A.air_ticket_cost),
			            0,
			            A.air_ticket_cost) - IF(ISNULL(A.other_cost),
			            0,
			            A.other_cost) - IF(ISNULL(C.payable), 0, C.payable) - IF(ISNULL(A.fy), 0, A.fy) - X.sys_cost - X.sale_cost) AS gross_profit
			    FROM
			        team_report X
			            LEFT JOIN
			        budget_order_view A ON A.team_number = X.team_number
			            LEFT JOIN
			        receivable B ON A.team_number = B.team_number
			            LEFT JOIN
			        view_team_payable C ON A.team_number = C.team_number
			            LEFT JOIN
			        final_order_view D ON A.team_number = D.team_number
			    GROUP BY LEFT(A.departure_date, 7) , A.product_manager_number;
			    
			CREATE VIEW view_product_profit_b AS
			    SELECT 
			        SUM(IF(item = 'J', money, 0)) AS product_cost,
			        SUM(IF(item = 'T', money, 0)) AS keep_cost,
			        month AS departure_month,
			        apply_user AS user_number
			    FROM
			        xinchi.reimbursement
			    WHERE
			        item IN ('J' , 'T') AND status != 'N'
			            AND delete_flg = 'N'
			    GROUP BY month , apply_user;
			    
			CREATE VIEW view_product_profit AS
			SELECT 
			    A.departure_month,
			    CASE A.status
			        WHEN 'N' THEN 'N'
			        WHEN 'Y' THEN 'Y'
			        ELSE 'N'
			    END AS status,
			    A.people_count,
			    A.product_manager_number AS user_number,
			    A.gross_profit,
			    B.product_cost,
			    B.keep_cost
			FROM
			    view_product_profit_a A
			        LEFT JOIN
			    view_product_profit_b B ON A.product_manager_number = B.user_number
			        AND A.departure_month = B.departure_month;
             ]]>
			<comment>create view view_product_profit_a,view_product_profit_b,view_product_profit</comment>
		</sql>
	</changeSet>
	<changeSet id="27" author="simpletiny">
		<sql>
            <![CDATA[
            	DROP VIEW IF EXISTS view_score;
            	CREATE VIEW  view_score AS
					SELECT sum((IFNULL(A.adult_count,0)+IFNULL(A.special_count,0))*A.product_value) AS score,
				    sum(IF(LEFT(A.confirm_date,7)=LEFT(curdate(),7),(IFNULL(A.adult_count,0)+IFNULL(A.special_count,0))*A.product_value,0) ) as month_score,
					A.create_user AS user_number,
					B.user_name AS user_name,
			        B.pk AS user_pk
					FROM budget_standard_order A
					LEFT JOIN user_base B on A.create_user = B.user_number
		            where LEFT(A.confirm_date,7)>='2023-02'
			        GROUP by create_user;
             ]]>
			<comment>ALTER VIEW view_score</comment>
		</sql>
	</changeSet>
	<changeSet id="28" author="simpletiny">
		<sql>
            <![CDATA[
				DROP VIEW IF EXISTS  view_sum_reimbursement;
					 CREATE VIEW view_sum_reimbursement AS
					    SELECT 
					        SUM(money) AS sum_reimbursement, apply_user
					    FROM
					        reimbursement
					    WHERE
					        month >= '2023-02' AND status != 'N'
					            AND item in ('X','H')
					    GROUP BY apply_user;
             ]]>
			<comment>ALTER VIEW view_sum_reimbursement</comment>
		</sql>
	</changeSet>
	<changeSet id="29" author="simpletiny">
		<sql>
            <![CDATA[
				DROP VIEW IF EXISTS  view_month_reimbursement;
					  CREATE VIEW view_month_reimbursement AS
						   SELECT 
							    SUM(money) AS sum_reimbursement, apply_user
							FROM
							    reimbursement
							WHERE
							    month = DATE_FORMAT(NOW(), '%Y-%m')
							        AND status != 'N'
							        AND item IN ('X' , 'H')
							GROUP BY apply_user;
             ]]>
			<comment>ALTER VIEW view_month_reimbursement</comment>
		</sql>
	</changeSet>
	<changeSet id="30" author="simpletiny">
		<sql>
            <![CDATA[
				CREATE TABLE pages (
					  page_url VARCHAR(50) NOT NULL COMMENT '页面地址',
					  level TINYINT(2) UNSIGNED NOT NULL COMMENT '页面层级',
					  father_pk CHAR(22) NULL COMMENT '父页面pk',
					  order_index TINYINT(2) UNSIGNED NOT NULL COMMENT '排序',
					  page_title VARCHAR(20) NOT NULL COMMENT '页面标题（名称）',
					  page_class VARCHAR(20) NULL COMMENT '页面分类（目前用于子页面定位）',
					  pk CHAR(22) NOT NULL,
					  create_user VARCHAR(10) NULL DEFAULT NULL,
					  create_time VARCHAR(15) NULL DEFAULT NULL,
					  update_user VARCHAR(10) NULL DEFAULT NULL,
					  update_time VARCHAR(15) NULL DEFAULT NULL,
					  PRIMARY KEY (pk))
					ENGINE = InnoDB
					DEFAULT CHARACTER SET = utf8
					COLLATE = utf8_bin
					COMMENT = '页面表';
             ]]>
			<comment>CREATE TABLE pages</comment>
		</sql>
	</changeSet>
	<changeSet id="31" author="simpletiny">
		<sql>
            <![CDATA[
				CREATE TABLE pages_role (
					  role VARCHAR(10) NOT NULL COMMENT '角色',
					  page_pk CHAR(22) NOT NULL COMMENT '页面pk',
					  page_url VARCHAR(50) NULL COMMENT '页面地址',
					  is_father CHAR(1) NOT NULL DEFAULT 'N' COMMENT '是否为一级页面',
					  pk CHAR(22) NOT NULL,
					  create_user VARCHAR(10) NULL DEFAULT NULL,
					  update_user VARCHAR(10) NULL DEFAULT NULL,
					  update_time VARCHAR(15) NULL DEFAULT NULL,
					  create_time VARCHAR(15) NULL DEFAULT NULL,
					  PRIMARY KEY (pk))
					ENGINE = InnoDB
					DEFAULT CHARACTER SET = utf8
             ]]>
			<comment>CREATE TABLE page_role</comment>
		</sql>
	</changeSet>
	<changeSet id="32" author="simpletiny">
		<sql>
            <![CDATA[
			INSERT INTO user_base (login_name, password, user_number, id, user_name, sex, delete_flg, user_status, create_time, update_time, pk, approve_user, approve_time) VALUES ('onlyticket', '697401ab403aa81eaf1eb314c0e4a89e', 'OT', '13154878', '单机票', 'F', 'N', 'N', '1678263451066', '1678263459723', 'dHWAcoB7fHF3dXJ3d3R-dw', 'N00000', '1678263459723');
            INSERT INTO user_info (id, id_file_name, user_right, update_time, create_time, pk, nick_name, cellphone, user_role, credit_limit, credit_balance) VALUES ('13154878', 'no', '', '1678263459725', '1678263451076', 'cnN7dnVxfIB3cXJ8dXV3dg', '单机票', '15454787878', 'PRODUCT', '0.00', '0.00');
             ]]>
			<comment>INSERT INTO user_base,user_info</comment>
		</sql>
	</changeSet>
	<changeSet id="33" author="simpletiny">
		<sql>
            <![CDATA[
            ALTER TABLE budget_standard_order 
					CHANGE COLUMN product_value product_value VARCHAR(10) NULL DEFAULT NULL COMMENT '产品分值,例10,2,代表成人10分其他2分' ;
            
             ]]>
			<comment>ALTER TABLE budget_standard_order </comment>
		</sql>
	</changeSet>
	<changeSet id="34" author="simpletiny">
		<sql>
            <![CDATA[
				 DROP VIEW IF EXISTS view_product_profit_a;
				 CREATE VIEW view_product_profit_a AS
				    SELECT 
				        LEFT(A.departure_date, 7) AS departure_month,
				        GROUP_CONCAT(DISTINCT X.approved
				            SEPARATOR ',') AS status,
				        SUM(IF(A.confirm_flg != 'N'
				                AND (D.final_type IS NULL
				                OR D.final_type != 4),
				            (IFNULL(A.adult_count, 0) + IFNULL(A.special_count, 0)),
				            0)) AS people_count,
				        SUM(IF(A.confirm_flg != 'N'
				                AND (D.final_type IS NULL
				                OR D.final_type != 4),
				            IFNULL(A.adult_count, 0) * SUBSTRING_INDEX(A.product_value, ',', 1) + IFNULL(A.special_count, 0) * SUBSTRING_INDEX(A.product_value, ',', - 1),
				            0)) AS score,
				        A.product_manager_number,
				        SUM(IF(X.discount_flg = 'Y',
				            X.discount_receivable,
				            IF(B.final_flg = 'Y',
				                B.final_receivable,
				                B.budget_receivable)) - IF(ISNULL(A.air_ticket_cost),
				            0,
				            A.air_ticket_cost) - IF(ISNULL(A.other_cost),
				            0,
				            A.other_cost) - IF(ISNULL(C.payable), 0, C.payable) - IF(ISNULL(A.fy), 0, A.fy) - X.sys_cost - X.sale_cost) AS gross_profit
				    FROM
				        team_report X
				            LEFT JOIN
				        budget_order_view A ON A.team_number = X.team_number
				            LEFT JOIN
				        receivable B ON A.team_number = B.team_number
				            LEFT JOIN
				        view_team_payable C ON A.team_number = C.team_number
				            LEFT JOIN
				        final_order_view D ON A.team_number = D.team_number
				    GROUP BY LEFT(A.departure_date, 7) , A.product_manager_number;
				
				 DROP VIEW IF EXISTS view_product_profit;
				 CREATE VIEW view_product_profit AS
				SELECT 
				    A.departure_month,
				    CASE A.status
				        WHEN 'N' THEN 'N'
				        WHEN 'Y' THEN 'Y'
				        ELSE 'N'
				    END AS status,
				    A.people_count,
				    A.score,
				    A.product_manager_number AS user_number,
				    A.gross_profit,
				    B.product_cost,
				    B.keep_cost
				FROM
				    view_product_profit_a A
				        LEFT JOIN
				    view_product_profit_b B ON A.product_manager_number = B.user_number
				        AND A.departure_month = B.departure_month;
             ]]>
			<comment>ALTER VIEW view_product_profit_a,view_product_profit </comment>
		</sql>
	</changeSet>
	<changeSet id="35" author="simpletiny">
		<sql>
            <![CDATA[
				 ALTER TABLE pay_approval 
					ADD COLUMN reject_reason VARCHAR(50) NULL COMMENT '驳回理由，限制在50字以内' AFTER receiver_bank;
             ]]>
			<comment>ALTER TABLE pay_approval</comment>
		</sql>
	</changeSet>
	<changeSet id="36" author="simpletiny">
		<sql>
            <![CDATA[
				INSERT INTO base_data (name, code, type, order_index, level, delete_flg, can_edit, pk) VALUES ('经理', 'MANAGER', 'ROLE', '1', '1', 'N', 'N', 'fHV-fHFzfH11doB5f3t5cg');
				INSERT INTO base_data (name, code, type, order_index, level, delete_flg, can_edit, pk) VALUES ('销售人员', 'SALES', 'ROLE', '3', '1', 'N', 'N', 'enl5cnR9fHR1c3iAenZ1dw');
				INSERT INTO base_data (name, code, type, order_index, level, delete_flg, can_edit, pk) VALUES ('产品', 'PRODUCT', 'ROLE', '2', '1', 'N', 'N', 'e3d2fnt4fIB4e3GAe3Z7fA');
				INSERT INTO base_data (name, code, type, order_index, level, delete_flg, can_edit, pk) VALUES ('会计', 'ACCOUNTING', 'ROLE', '4', '1', 'N', 'N', 'dXF3cnp6fH51dX91e3F9gA');
				INSERT INTO base_data (name, code, type, order_index, level, delete_flg, can_edit, pk) VALUES ('出纳', 'CASHIER', 'ROLE', '5', '1', 'N', 'N', 'dn5zc3V3fHp4dHp1eHV1cQ');
				INSERT INTO base_data (name, code, type, order_index, level, delete_flg, can_edit, pk) VALUES ('票务', 'TICKET', 'ROLE', '6', '1', 'N', 'N', 'fnFxc3txfHJ4gHt1cXyAfg');
				INSERT INTO base_data (name, code, type, order_index, level, delete_flg, can_edit, pk) VALUES ('合作产品', 'CPRODUCT', 'ROLE', '7', '1', 'N', 'N', 'dHp2en54fHJ3e3dxe3N4gA');

             ]]>
			<comment>INSERT INTO base_data,user roles</comment>
		</sql>
	</changeSet>
	<changeSet id="37" author="simpletiny">
		<sql>
            <![CDATA[
				ALTER TABLE budget_standard_order 
						DROP COLUMN next_day,
						DROP COLUMN land_time,
						DROP COLUMN off_time,
						DROP COLUMN end_airport,
						DROP COLUMN end_city,
						DROP COLUMN start_airport,
						DROP COLUMN start_city,
						DROP COLUMN ticket_number;
             ]]>
			<comment>ALTER TABLE budget_standard_order</comment>
		</sql>
	</changeSet>
	<changeSet id="38" author="simpletiny">
		<sql>
            <![CDATA[
				ALTER TABLE budget_standard_order 
				ADD COLUMN product_name VARCHAR(8) NULL AFTER product_pk;
             ]]>
			<comment>ALTER TABLE budget_standard_order</comment>
		</sql>
	</changeSet>
	<changeSet id="39" author="simpletiny">
		<sql>
            <![CDATA[
            	DROP VIEW IF EXISTS budget_order_view;
				CREATE VIEW budget_order_view AS
					select  A.team_number, 
					    	A.product_name,
							'' as product_pk,
					    	A.client_employee_pk, 
					    	C.name AS client_employee_name,
					    	A.independent_flg, 
					    	A.comment, 
					    	A.other_cost_comment, 
					    	A.other_cost, 
					    	A.fy, 
					    	A.special_cost, 
					    	A.special_count, 
					    	A.adult_cost, 
					    	A.adult_count, 
					    	A.receivable, 
					    	A.days, 
					    	A.departure_date, 
					    	A.pk, 
					    	A.update_user,
					    	A.create_user AS create_user_number,
					    	B.user_name AS create_user,
					    	A.confirm_flg, 
					    	A.create_time,
					    	A.update_time,
					    	A.confirm_date,
					    	A.confirm_file,
					    	'N' AS standard_flg,
					    	A.product_manager AS product_manager_number,
					    	D.user_name AS product_manager,
					    	A.air_ticket_cost,
					    	A.product_cost,
					    	A.operate_flg,
					    	A.name_list,
                            A.lock_flg,
                            A.name_confirm_status,
                            A.passenger_captain,
                            '' AS receivable_comment,
                            '' AS treat_comment,
                            '' AS client_name,
                            case when
							A.departure_date>now() then 'no'
							when now()>=A.departure_date and
							DATE_ADD(A.departure_date,interval A.days-1 day) >
							now()
							then 'yes'
							when now()>=DATE_ADD(A.departure_date,interval A.days-1 day) then 'back'
							end
							AS status,
							0 AS product_value,
							A.receivable_first_flg
					from budget_non_standard_order A LEFT JOIN user_base B ON A.create_user = B.user_number
					LEFT JOIN client_employee C ON A.client_employee_pk = C.pk
					LEFT JOIN user_base D ON A.product_manager = D.user_number
					union all 
					select  A.team_number, 
					    	IFNULL(A.product_name,C.name) AS product_name,
							A.product_pk,
					    	A.client_employee_pk,
					    	D.name AS client_employee_name,
					    	A.independent_flg, 
					    	A.comment, 
					    	A.other_cost_comment, 
					    	A.other_cost, 
					    	A.fy, 
					    	A.special_cost, 
					    	A.special_count, 
					    	A.adult_cost, 
					    	A.adult_count, 
					    	A.receivable, 
					    	A.days, 
					    	A.departure_date, 
					    	A.pk, 
					    	A.update_user, 
					    	A.create_user AS create_user_number, 
					    	B.user_name AS create_user,
					    	A.confirm_flg, 
					    	A.create_time,
					    	A.update_time,
					    	A.confirm_date,
					    	A.confirm_file,
					    	'Y' AS standard_flg,
					    	C.product_manager AS product_manager_number,
					    	E.user_name AS product_manager,
					    	A.air_ticket_cost,
					    	A.product_cost,
					    	A.operate_flg,
					    	A.name_list,
                            A.lock_flg,
                            A.name_confirm_status,
                            A.passenger_captain,
                            A.receivable_comment,
                            A.treat_comment,
                            F.client_short_name AS client_name,
                            case when
							A.departure_date>now() then 'no'
							when now()>=A.departure_date and
							DATE_ADD(A.departure_date,interval A.days-1 day) >
							now()
							then 'yes'
							when now()>=DATE_ADD(A.departure_date,interval A.days-1 day) then 'back'
							end
							AS status,
							A.product_value,
							A.receivable_first_flg
					from budget_standard_order A LEFT JOIN user_base B ON A.create_user = B.user_number
					LEFT JOIN product C ON A.product_pk = C.pk
					LEFT JOIN client_employee D ON A.client_employee_pk = D.pk
       				LEFT JOIN user_base E ON C.product_manager = E.user_number
       				LEFT JOIN client F ON D.financial_body_pk = F.pk;

             ]]>
			<comment>ALTER VIEW budget_order_view </comment>
		</sql>
	</changeSet>
	<changeSet id="40" author="simpletiny">
		<sql>
            <![CDATA[
					ALTER TABLE final_standard_order 
						DROP COLUMN ticket_number,
						DROP COLUMN start_city,
						DROP COLUMN start_airport,
						DROP COLUMN end_city,
						DROP COLUMN end_airport,
						DROP COLUMN off_time,
						DROP COLUMN land_time,
						DROP COLUMN next_day;
	            ]]>
			<comment>ALTER TABLE final_standard_order</comment>
		</sql>
	</changeSet>
	<changeSet id="41" author="simpletiny">
		<sql>
            <![CDATA[
					ALTER TABLE final_standard_order 
					ADD COLUMN product_name VARCHAR(8) NULL AFTER product_pk;
	            ]]>
			<comment>ALTER TABLE final_standard_order</comment>
		</sql>
	</changeSet>
	<changeSet id="42" author="simpletiny">
		<sql>
            <![CDATA[
					ALTER TABLE final_non_standard_order 
						DROP COLUMN ticket_number,
						DROP COLUMN start_city,
						DROP COLUMN start_airport,
						DROP COLUMN end_city,
						DROP COLUMN end_airport,
						DROP COLUMN off_time,
						DROP COLUMN land_time,
						DROP COLUMN next_day;
	            ]]>
			<comment>ALTER TABLE final_non_standard_order </comment>
		</sql>
	</changeSet>
	<changeSet id="43" author="simpletiny">
		<sql>
            <![CDATA[
					ALTER TABLE budget_standard_order 
					ADD COLUMN cancel_flg CHAR(1) NULL DEFAULT 'N' COMMENT '订单取消标识，默认,未取消\'N\',已取消\'Y\'' AFTER receivable_first_flg;
					ALTER TABLE budget_non_standard_order 
					ADD COLUMN cancel_flg CHAR(1) NULL DEFAULT 'N' COMMENT '订单取消标识，默认,未取消\'N\',已取消\'Y\'' AFTER receivable_first_flg;
	            ]]>
			<comment>ALTER TABLE budget_standard_order,budget_non_standard_order</comment>
		</sql>
	</changeSet>
	<changeSet id="44" author="simpletiny">
		<sql>
            <![CDATA[
            	DROP VIEW IF EXISTS budget_order_view;
				CREATE VIEW budget_order_view AS
					select  A.team_number, 
					    	A.product_name,
							'' as product_pk,
					    	A.client_employee_pk, 
					    	C.name AS client_employee_name,
					    	A.independent_flg, 
					    	A.comment, 
					    	A.other_cost_comment, 
					    	A.other_cost, 
					    	A.fy, 
					    	A.special_cost, 
					    	A.special_count, 
					    	A.adult_cost, 
					    	A.adult_count, 
					    	A.receivable, 
					    	A.days, 
					    	A.departure_date, 
					    	A.pk, 
					    	A.update_user,
					    	A.create_user AS create_user_number,
					    	B.user_name AS create_user,
					    	A.confirm_flg, 
					    	A.create_time,
					    	A.update_time,
					    	A.confirm_date,
					    	A.confirm_file,
					    	'N' AS standard_flg,
					    	A.product_manager AS product_manager_number,
					    	D.user_name AS product_manager,
					    	A.air_ticket_cost,
					    	A.product_cost,
					    	A.operate_flg,
					    	A.name_list,
                            A.lock_flg,
                            A.cancel_flg,
                            A.name_confirm_status,
                            A.passenger_captain,
                            '' AS receivable_comment,
                            '' AS treat_comment,
                            '' AS client_name,
                            case when
							A.departure_date>now() then 'no'
							when now()>=A.departure_date and
							DATE_ADD(A.departure_date,interval A.days-1 day) >
							now()
							then 'yes'
							when now()>=DATE_ADD(A.departure_date,interval A.days-1 day) then 'back'
							end
							AS status,
							0 AS product_value,
							A.receivable_first_flg
					from budget_non_standard_order A LEFT JOIN user_base B ON A.create_user = B.user_number
					LEFT JOIN client_employee C ON A.client_employee_pk = C.pk
					LEFT JOIN user_base D ON A.product_manager = D.user_number
					union all 
					select  A.team_number, 
					    	IFNULL(A.product_name,C.name) AS product_name,
							A.product_pk,
					    	A.client_employee_pk,
					    	D.name AS client_employee_name,
					    	A.independent_flg, 
					    	A.comment, 
					    	A.other_cost_comment, 
					    	A.other_cost, 
					    	A.fy, 
					    	A.special_cost, 
					    	A.special_count, 
					    	A.adult_cost, 
					    	A.adult_count, 
					    	A.receivable, 
					    	A.days, 
					    	A.departure_date, 
					    	A.pk, 
					    	A.update_user, 
					    	A.create_user AS create_user_number, 
					    	B.user_name AS create_user,
					    	A.confirm_flg, 
					    	A.create_time,
					    	A.update_time,
					    	A.confirm_date,
					    	A.confirm_file,
					    	'Y' AS standard_flg,
					    	C.product_manager AS product_manager_number,
					    	E.user_name AS product_manager,
					    	A.air_ticket_cost,
					    	A.product_cost,
					    	A.operate_flg,
					    	A.name_list,
                            A.lock_flg,
                            A.cancel_flg,
                            A.name_confirm_status,
                            A.passenger_captain,
                            A.receivable_comment,
                            A.treat_comment,
                            F.client_short_name AS client_name,
                            case when
							A.departure_date>now() then 'no'
							when now()>=A.departure_date and
							DATE_ADD(A.departure_date,interval A.days-1 day) >
							now()
							then 'yes'
							when now()>=DATE_ADD(A.departure_date,interval A.days-1 day) then 'back'
							end
							AS status,
							A.product_value,
							A.receivable_first_flg
					from budget_standard_order A LEFT JOIN user_base B ON A.create_user = B.user_number
					LEFT JOIN product C ON A.product_pk = C.pk
					LEFT JOIN client_employee D ON A.client_employee_pk = D.pk
       				LEFT JOIN user_base E ON C.product_manager = E.user_number
       				LEFT JOIN client F ON D.financial_body_pk = F.pk;

             ]]>
			<comment>ALTER VIEW budget_order_view </comment>
		</sql>
	</changeSet>
	<changeSet id="45" author="simpletiny">
		<sql>
            <![CDATA[
            DROP VIEW IF EXISTS final_order_view;
            CREATE VIEW final_order_view AS
			select 
			    A.team_number,
			    A.product_name,
			    '' as product_pk,
			    A.client_employee_pk,
			    C.name AS client_employee_name,
			    E.client_short_name AS client_name,
			    A.independent_flg,
			    A.comment,
			    A.other_cost_comment,
			    A.other_cost,
			    A.fy,
			    A.special_cost,
			    A.special_count,
			    A.adult_cost,
			    A.adult_count,
			    A.receivable AS final_receivable,
				F.receivable AS budget_receivable,
				A.days,
			    A.departure_date,
			    A.pk,
			    A.update_user,
			    A.create_user,
			    A.create_time,
			    A.update_time,
			    A.confirm_date,
			    A.confirm_file,
			    'N' AS standard_flg,
			    A.product_manager AS product_manager_number,
			    D.user_name AS product_manager,
			    A.air_ticket_cost,
			    A.product_cost,
			    A.operate_flg,
			    A.name_list,
			    A.receivable_comment,
			    A.passenger_captain,
			    A.treat_comment,
			    A.final_type,
			    A.raise_money,
			    A.raise_comment,
			    A.reduce_money,
			    A.reduce_comment,
			    A.complain_money,
			    A.complain_reason,
			    A.complain_solution,
			    A.status,
			    A.voucher_file,
			    A.sale AS sale_number,
			    B.user_name AS sale_name
			from
			    final_non_standard_order A
			        LEFT JOIN
			    user_base B ON A.sale = B.user_number
			        LEFT JOIN
			    client_employee C ON A.client_employee_pk = C.pk
			        LEFT JOIN
			    user_base D ON A.product_manager = D.user_number
			        LEFT JOIN
			    client E ON E.pk = C.financial_body_pk 
					LEFT JOIN
				budget_non_standard_order F ON A.team_number = F.team_number
			union all select 
			    A.team_number,
			    IFNULL(A.product_name,C.name) AS product_name,
			    A.product_pk,
			    A.client_employee_pk,
			    D.name AS client_employee_name,
			    F.client_short_name AS client_name,
			    A.independent_flg,
			    A.comment,
			    A.other_cost_comment,
			    A.other_cost,
			    A.fy,
			    A.special_cost,
			    A.special_count,
			    A.adult_cost,
			    A.adult_count,
			    A.receivable AS final_receivable,
				G.receivable AS budget_receivable,
			    A.days,
			    A.departure_date,
			    A.pk,
			    A.update_user,
			    A.create_user,
			    A.create_time,
			    A.update_time,
			    A.confirm_date,
			    A.confirm_file,
			    'Y' AS standard_flg,
			    C.product_manager AS product_manager_number,
			    E.user_name AS product_manager,
			    A.air_ticket_cost,
			    A.product_cost,
			    A.operate_flg,
			    A.name_list,
			    A.receivable_comment,
			    A.passenger_captain,
			    A.treat_comment,
			    A.final_type,
			    A.raise_money,
			    A.raise_comment,
			    A.reduce_money,
			    A.reduce_comment,
			    A.complain_money,
			    A.complain_reason,
			    A.complain_solution,
			    A.status,
			    A.voucher_file,
			    A.sale AS sale_number,
			    B.user_name AS sale_name
			from
			    final_standard_order A
			        LEFT JOIN
			    user_base B ON A.sale = B.user_number
			        LEFT JOIN
			    product C ON A.product_pk = C.pk
			        LEFT JOIN
			    client_employee D ON A.client_employee_pk = D.pk
			        LEFT JOIN
			    user_base E ON C.product_manager = E.user_number
			        LEFT JOIN
			    client F ON D.financial_body_pk = F.pk
					LEFT JOIN
				budget_standard_order G ON A.team_number = G.team_number
             ]]>
			<comment>ALTER VIEW final_order_view</comment>
		</sql>
	</changeSet>
	<changeSet id="46" author="simpletiny">
		<sql>
            <![CDATA[
           		UPDATE budget_standard_order A
				        LEFT JOIN
				    final_standard_order B ON A.team_number = B.team_number 
				SET 
				    A.cancel_flg = 'Y'
				WHERE
				    B.final_type = 4;
				    
				UPDATE budget_non_standard_order A
				        LEFT JOIN
				    final_non_standard_order B ON A.team_number = B.team_number 
				SET 
				    A.cancel_flg = 'Y'
				WHERE
				    B.final_type = 4;   
             ]]>
			<comment>UPDATE budget_standard_order,budget_non_standard_order</comment>
		</sql>
	</changeSet>
	<changeSet id="47" author="simpletiny">
		<sql>
            <![CDATA[
				drop view if exists year_order_count;
				-- 年订单
				create view year_order_count as
				    select 
				        A.client_employee_pk as client_employee_pk, count(A.client_employee_pk) as year_order_count,
						B.relation_level as relation_level,
				        B.back_level as back_level,
				        B.market_level as market_level
				    from
				        budget_order_view A 
						LEFT JOIN client_employee B on A.client_employee_pk=B.pk
				    where
				        LEFT(confirm_date, 4) = DATE_FORMAT(NOW(), '%Y')
				    group by A.client_employee_pk;
				    
				    
				-- 签单期间
				drop view if exists order_period;
				create view order_period as
				    select 
				        A.client_employee_pk,
				        max(A.confirm_date) as last_confirm_date,
				        datediff(now(), max(A.confirm_date)) last_order_period,
						B.relation_level as relation_level,
				        B.back_level as back_level,
				        B.market_level as market_level
				    from
				        budget_order_view A 
						LEFT JOIN client_employee B on A.client_employee_pk=B.pk
				    group by A.client_employee_pk;

             ]]>
			<comment> ALTER VIEW year_order_count</comment>
		</sql>
	</changeSet>
	<changeSet id="48" author="simpletiny">
		<sql>
            <![CDATA[
				ALTER TABLE sale_order_name_list 
				ADD INDEX team_number (team_number ASC),
				ADD INDEX id (id ASC),
				ADD INDEX name (name ASC);
				
				ALTER TABLE air_ticket_name_list 
				ADD INDEX team_number (team_number ASC),
				ADD INDEX id (id ASC),
				ADD INDEX name (name ASC);
								
				ALTER TABLE product_order_air_info 
				ADD INDEX product_order_number (product_order_number ASC);
				
				ALTER TABLE passenger_ticket_info 
				ADD INDEX passenger_pk (passenger_pk ASC);
             ]]>
			<comment> add INDEX</comment>
		</sql>
	</changeSet>
	<changeSet id="49" author="simpletiny">
		<sql>
            <![CDATA[
				ALTER TABLE product_order_air_info 
				ADD COLUMN ticket_date VARCHAR(10) NULL COMMENT '航班日期' AFTER product_order_number;
				
				UPDATE product_order_air_info A
				        LEFT JOIN
				    product_order B ON A.product_order_number = B.order_number 
				SET 
				    A.ticket_date = DATE_ADD(B.departure_date,
				        INTERVAL A.start_day - 1 DAY)
				WHERE
				    B.pk IS NOT NULL;
             ]]>
			<comment>ALTER TABLE product_order_air_info and update data</comment>
		</sql>
	</changeSet>
	<changeSet id="50" author="simpletiny">
		<sql>
            <![CDATA[
				DROP VIEW IF EXISTS view_drop_off;
				CREATE view view_drop_off AS
					SELECT 
				    C.product_order_number,
				    X.team_number,
				    IFNULL(A.first_ticket_date, E.ticket_date) AS first_ticket_date,
				    C.create_user AS client_number,
				    IFNULL(A.first_start_city, E.start_city) AS first_start_city,
				    IFNULL(A.first_end_city, E.end_city) AS first_end_city,
				    IFNULL(B.ticket_number, E.flight_number) AS ticket_number,
				    IFNULL(B.from_to_time, '-') AS from_to_time,
				    IFNULL(B.from_to_city,
				            CONCAT(E.start_city, '--', E.end_city)) AS from_to_city,
				    IFNULL(B.from_airport, '-') AS from_airport,
				    IFNULL(B.to_airport, '-') AS to_airport,
				    GROUP_CONCAT(X.name, ':', X.id, ';') AS name_list,
				    GROUP_CONCAT(IF(X.chairman = 'Y', X.name, ''),
				        X.cellphone_A,
				        X.cellphone_B) AS phones
				FROM
				    sale_order_name_list X
				        LEFT JOIN
				    air_ticket_name_list A ON X.team_number = A.team_number
				        AND X.id = A.id
				        AND X.name = A.name
				        LEFT JOIN
				    passenger_ticket_info B ON A.pk = B.passenger_pk
				        AND B.ticket_index = 1
				        LEFT JOIN
				    product_order_team_number C ON X.team_number = C.team_number
				        LEFT JOIN
				    product_order_air_info E ON C.product_order_number = E.product_order_number
				        AND E.flight_index = 1
				WHERE
				    X.create_time > 1640966400000
				GROUP BY IFNULL(A.first_ticket_date, E.ticket_date) , A.team_number;
             ]]>
			<comment>Alter view view_drop_off</comment>
		</sql>
	</changeSet>
</databaseChangeLog>




